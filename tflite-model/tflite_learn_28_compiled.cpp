/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.10.2024 16:39:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 10
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 20
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 193680;
#else
constexpr int kTensorArenaSize = 192656;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_SUB, OP_MUL, OP_MEAN, OP_SQUARED_DIFFERENCE, OP_ADD, OP_RSQRT, OP_FULLY_CONNECTED, OP_TRANSPOSE, OP_SPLIT, OP_PACK, OP_SOFTMAX, OP_CONV_2D,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,600 } };
const TfArray<1, float> quant0_scale = { 1, { 1.0236291885375977, } };
const TfArray<1, int> quant0_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[3] = { 1, 200, 3, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const ALIGN(4) int32_t tensor_data2[1] = { 2, };
const TfArray<1, int> tensor_dimension2 = { 1, { 1 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 200, 2, 64, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 0, 2, 1, 3, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 0, 2, 3, 1, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data6[3] = { 2, 200, 64, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const int32_t tensor_data7[1] = { 0 };
const int tensor_dimension7 = 0; /* empty TfLiteIntArray */
const ALIGN(8) int32_t tensor_data8[3] = { 2, 64, 200, };
const TfArray<1, int> tensor_dimension8 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data9[2] = { 64, 200, };
const TfArray<1, int> tensor_dimension9 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data10[2] = { 1, 0, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 2, 200, 200, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data12[4] = { 0, 1, 3, 2, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[3] = { 2, 200, 200, };
const TfArray<1, int> tensor_dimension13 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data14[2] = { 200, 64, };
const TfArray<1, int> tensor_dimension14 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data15[4] = { 1, 2, 200, 64, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data16[2] = { 200, 128, };
const TfArray<1, int> tensor_dimension16 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data17[4] = { 1, 1, 200, 3, };
const TfArray<1, int> tensor_dimension17 = { 1, { 4 } };
const int32_t tensor_data18[1] = { 2 };
const int tensor_dimension18 = 0; /* empty TfLiteIntArray */
const ALIGN(8) int32_t tensor_data19[2] = { 1160, -1160, };
const TfArray<1, int> tensor_dimension19 = { 1, { 2 } };
const TfArray<1, float> quant19_scale = { 1, { 0.00016785546904429793, } };
const TfArray<1, int> quant19_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[2*32] = { 
  -6, 19, 74, -64, 50, 32, -51, -19, -82, 30, 80, 93, -29, 80, 71, 89, -56, -90, -51, 9, 82, -10, 92, 73, 65, -18, -2, -55, 22, -92, -49, 101, 
  -48, 53, 32, 42, -6, -23, 74, 47, 8, 92, -60, 10, -47, 127, 107, 35, 67, -28, -6, -54, 1, -52, 123, 32, -56, -80, 43, -75, -43, -10, -73, 47, 
};
const TfArray<2, int> tensor_dimension20 = { 2, { 2,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0035552955232560635, } };
const TfArray<1, int> quant20_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[32] = { 685, -777, 515, -754, 331, 167, -663, -779, -763, -642, 375, 79, 523, -1024, -775, 318, -789, -854, -764, 467, 200, 324, -642, 443, 88, 212, -553, 328, 547, -835, 581, 693, };
const TfArray<1, int> tensor_dimension21 = { 1, { 32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.00022323650773614645, } };
const TfArray<1, int> quant21_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[32*200] = { 
  35, 54, 24, -76, 28, 22, -3, -28, 47, -40, 5, 41, 50, -27, 28, -18, 6, 10, 51, -51, 6, 2, 49, -8, -17, 26, -23, 54, -1, -85, 55, -47, 24, 5, 15, 55, 11, 19, 7, -85, 63, 29, -27, 50, 40, 10, 38, -15, -6, -32, -71, 27, -30, -63, -13, -29, -70, -60, -62, -53, 43, -11, 19, 24, -14, -30, -12, -46, -93, -14, 28, -86, -74, -67, -26, -43, -85, -3, -51, -45, 14, -86, -31, -51, -72, -80, -36, -44, 66, 74, -58, -57, -53, 27, 21, -11, -41, -40, 2, 39, -4, 34, 29, 32, -10, -59, -71, 20, 49, -40, 41, -48, 15, -12, -59, 31, -70, 5, -51, -44, -18, 22, 10, -63, -46, 83, -9, 19, -55, 30, 0, 49, -69, 47, -43, -57, -15, -39, -56, 11, 48, -16, -11, -63, 10, 60, 6, 19, 17, -49, -51, 22, -49, 50, -15, -66, -43, 22, -63, -28, 33, -42, 16, 8, 25, -81, -27, -67, -43, 22, -80, -42, -56, -30, 12, 26, -37, 14, -52, 30, 6, -25, -9, -4, -66, -38, -71, -20, 34, 0, 34, -34, 15, 16, 13, -78, 42, 63, -49, -38, 
  -28, 34, 23, -18, 38, -16, -69, -30, 46, 33, 13, -68, 13, -51, 32, 42, -43, -63, -53, 20, 8, -27, 42, -109, -58, -14, -79, -81, -6, 49, 23, -87, -36, -46, -19, 25, -104, 35, -68, -27, -64, -14, 15, -91, 49, -64, -36, -36, -32, -96, 3, -76, -60, -53, -37, 22, 22, -85, -4, -2, 18, -65, 31, -32, -11, 0, 48, -54, 88, 33, -12, -49, -36, 64, -48, 15, 55, 27, 63, -26, 34, 68, 17, 72, 14, -48, 42, 24, -12, -51, -56, 68, -20, -21, -66, 67, 26, 64, -69, 20, 12, -28, -65, 33, 99, 28, 86, 39, 33, 71, 30, 101, 88, 100, 94, 5, 26, 6, 11, -34, 75, 81, 56, 22, -6, -11, -47, 53, 34, -4, 17, -39, -71, -3, -8, -13, -15, -12, 18, 57, -39, -67, 62, -52, 3, 26, 40, -47, -60, -32, -59, 60, 10, 21, 42, 22, -50, 31, -79, -78, 50, 20, -73, -60, 37, -12, -27, 6, 72, 70, 15, -17, 55, -54, -56, 49, 12, 58, 6, 8, 33, 23, 6, 17, -73, 60, -22, -59, -43, -22, 35, -23, 27, -56, -57, 1, 14, -24, 12, 16, 
  16, -33, -32, 70, -11, 71, 41, 30, 70, 29, 31, 90, 39, 1, 31, 20, -65, 19, -57, 12, -42, 32, -35, 56, 52, 3, 23, 57, -41, -16, 23, 49, 46, -40, 18, -31, 39, 16, -24, 13, 20, 26, 58, -7, 48, 26, -36, 78, -37, 17, 57, -27, -47, 28, -86, -74, 68, -6, -57, -31, 13, -13, 60, -30, -16, 62, 36, -36, -64, 51, -21, -21, -42, 24, 34, -42, 80, 31, -15, 72, 30, -58, 53, -8, -3, -32, 58, 52, 28, -43, 3, 41, 6, -5, -41, -18, 11, 39, 65, 42, -43, 74, 22, -41, -58, -1, 46, -7, -32, 47, -33, -13, 41, -56, -26, -40, 14, 47, 41, -1, -56, -10, -65, 24, 16, 44, -37, 3, -13, 56, 3, -19, 50, 43, -25, 5, -1, -35, -45, -2, -42, -34, -28, -31, -34, -32, -54, -47, 82, -2, 72, 46, 39, 77, 6, -4, 45, -39, 75, 33, 22, 4, -20, -27, -27, 17, 5, -35, 46, 55, 30, -39, 21, 1, 74, -5, -33, 22, 13, -53, 15, 9, 42, -68, -28, -81, -79, 63, -13, 29, 50, 18, 21, 8, -75, 23, -66, -47, -100, 49, 
  -32, 4, 11, -7, -57, -17, -39, 48, -52, -7, -71, -79, -17, 55, -55, 22, -14, -38, 38, -27, -5, -24, 52, -7, -23, 28, 59, 37, 16, 3, -23, 32, 38, -6, 37, 36, -76, 12, 75, 56, -21, 56, 36, -48, 60, 55, 14, 0, -17, -8, -24, 55, -73, 49, -56, -7, -84, -67, 52, 7, -77, -59, -38, 12, 56, -64, -10, 31, -57, 0, -43, 22, 1, -49, 30, -40, -59, -31, 48, 22, 4, 9, -26, -73, 44, 57, -38, -52, 48, 48, -38, 81, 56, 45, -20, -46, 68, 23, 71, 86, -55, -36, 32, 32, -11, 49, 18, 67, -43, -29, 75, 12, 4, 65, 52, -39, -29, 68, 49, 17, 14, -17, -9, 32, -21, 56, 46, 67, -29, -35, 17, 29, -37, 1, 33, -36, -6, 2, 28, 55, -21, -66, -18, 50, -25, -5, -27, -42, 48, -68, 45, 8, -3, -10, -12, 1, -37, -50, 12, -53, -28, 38, -12, -42, 62, -41, -59, -10, -65, 56, -40, -48, -45, -4, -47, 16, 57, 35, -44, 33, -18, -48, 82, -54, 68, 70, -54, 68, 38, -48, 36, -44, 51, 29, 21, 15, -35, -30, -24, 6, 
  -29, 46, -11, -47, -51, -60, 42, -13, 19, 70, 3, -49, -19, 13, -17, 40, -62, -54, 57, 2, -13, 52, -31, -1, 6, 38, 20, -12, -55, -65, 77, -18, -60, 22, 9, 52, 60, 7, -75, 25, 10, -38, -16, 33, 39, 24, 13, -52, 46, -19, -45, 46, -62, 19, -34, -86, -51, -29, -60, 49, -74, -8, -8, -51, -45, -56, -62, -10, 40, -56, 36, -51, -17, -7, 32, -25, -11, 5, -93, -76, 6, 35, 9, 3, -48, 42, -74, 23, -42, -3, -5, -71, 1, -54, -55, 28, 14, -58, 31, 2, 19, -24, -20, -55, 38, 42, 35, -25, -72, -24, -62, -92, -24, -84, 35, -31, 1, -1, 38, -84, -90, 9, 24, -64, -21, 3, -36, -30, -24, 2, -16, -67, 52, -59, -32, -40, 78, -7, -79, 22, -51, -43, -14, -34, -55, -33, -12, 6, -40, -60, -61, 58, -49, -72, 62, 63, 50, -75, 49, -60, 64, 22, -16, 26, 61, -37, 21, 43, -33, -2, 45, 15, -43, 40, -34, -87, -51, -63, 20, 18, 43, -67, -17, 22, -56, -74, -35, -39, -20, 34, 24, 73, -53, -57, -12, -34, -15, -7, 13, 33, 
  -47, 47, 3, -45, 2, -20, 11, -39, -12, -37, -18, 60, 2, 55, 55, -37, 54, -7, 42, -68, 57, 15, -46, -76, -8, 61, -25, 6, 11, -25, -67, 37, -45, -7, 15, -53, 31, -49, 54, -36, 50, -58, -6, 47, -66, -66, 32, 51, 47, 77, -53, 7, -54, -57, 53, 39, -60, 7, 37, 39, -30, -21, -13, -77, 31, -43, 52, 40, -74, 58, -21, 46, -2, -39, -10, -63, -4, -87, -77, -22, -68, -6, -5, -37, -14, -62, 41, 30, -67, -43, 16, -6, -55, 40, -41, -8, -33, -44, -10, -15, -12, -2, -1, -21, 27, -29, 39, 9, -31, -19, -86, 18, -35, -52, -63, 40, -28, -9, -15, -5, 42, -8, -1, 53, -53, -16, 43, -76, 19, -16, -5, -2, -65, 40, 67, -63, -14, 57, -2, -83, -35, 21, -71, -37, -29, -49, 25, -64, 18, 4, -37, 64, -26, -26, -5, -55, -11, -20, 12, -32, -48, 26, -37, 11, -35, 31, -15, 16, -19, -37, -10, 40, -56, 6, 48, -89, 37, 10, -24, -28, 50, -44, 62, -46, 61, 10, 58, 13, -15, -22, -60, 13, 10, 22, -52, 60, -45, -87, 31, -76, 
  9, -48, 59, -4, -41, -72, -54, 24, 28, 49, -15, 10, -37, 54, -33, -25, -13, 63, 44, 62, -4, 11, -49, -68, 45, -6, 33, -12, -49, -52, -9, -45, 41, -19, 59, -65, 40, -11, -72, -55, -22, -64, -11, 15, -50, 61, 15, -17, -59, 34, -28, -25, 41, -57, -41, -11, 1, 47, 5, 65, 49, -22, 32, -43, -36, -41, 20, -3, 63, -33, 13, 27, -38, -34, 11, 32, -36, 11, 6, 32, 7, -3, -39, 61, 52, 23, -60, 28, -67, -46, 33, -56, -18, 44, 13, 5, -13, 81, 47, -78, -33, 12, 29, 65, 16, 2, 35, 44, 30, 18, 36, 3, 80, 3, 72, 17, 38, -28, -3, -38, 10, -18, 71, -64, 4, 45, 40, -12, 48, -46, -55, 19, -59, -49, -32, -46, -24, 38, 48, 2, 31, -52, 19, -60, -55, -49, 32, -9, -56, 63, -10, -60, -76, 32, -15, 34, -11, 23, 30, -30, 51, -16, 13, -35, 53, 47, 61, -29, 71, -19, 1, 0, 63, -50, 4, -43, 45, -6, 27, -58, -71, -48, 23, -15, -18, 14, -27, 31, 35, -45, 12, 56, 15, -26, -43, 41, 50, -55, -38, 54, 
  -2, -55, -23, 44, 21, 43, 1, -42, -4, -59, 45, 40, -30, -46, -40, -22, -42, -49, -62, 28, 2, 5, 7, -33, 56, 40, -5, -5, -71, -28, -27, -27, -25, 50, -27, -8, -24, -51, -13, 2, -1, -73, 64, -17, -94, -63, 14, 33, -12, -24, -82, 66, -48, 32, -48, -58, -15, 53, -37, 60, -14, -35, 14, -22, -49, 13, -72, 39, -16, 14, -12, -13, 34, -38, -15, -35, -11, 50, 35, -53, -52, 72, 52, 71, 56, 32, 58, 4, -7, 68, -54, 65, -9, -16, -51, -25, -54, 23, -43, -59, 14, 54, -58, 33, -1, 55, 73, 67, -6, 26, 86, 60, 70, 19, 85, 20, 60, 94, 45, 42, 25, -55, -33, 23, -29, -45, 31, -4, 54, 40, -19, -44, -7, -66, 53, 7, 51, -10, -31, -15, 30, -61, 28, -41, 40, -6, 14, -31, 6, 16, -29, 24, 10, -34, -23, -40, -6, 0, 30, -14, -29, -16, 32, 34, 4, 23, -67, 11, 14, -6, 48, 0, -76, 49, 35, 29, -3, 24, -56, -76, 23, -11, 32, -77, 30, -49, -24, -68, 25, -13, -52, 45, 23, -42, 23, -59, -25, 12, 52, 44, 
  64, 30, 56, -68, -9, -65, -30, -13, 6, -65, 54, 52, -7, 34, -52, 13, 63, -36, -52, -40, 38, -47, -60, 36, 3, -40, 34, 9, -77, -76, -51, -60, 70, 50, 50, -55, 23, -8, -53, -2, 42, -29, 55, 47, 9, 6, 8, 35, 38, -3, -65, -36, -53, -15, -5, -46, -16, 63, -47, -68, -25, -17, -75, 5, -29, 59, -23, -37, 43, 0, -1, 23, 24, 0, 42, 76, 8, 53, 72, 15, -1, -58, 31, 43, 2, -18, -57, 28, 53, -40, 67, 42, -28, -76, -27, -46, 43, -55, 73, 107, 41, 38, -72, -37, -50, -1, -29, -1, 21, -17, -26, -25, 91, -35, -14, 43, -37, 22, 27, -18, 55, -41, 74, -48, 21, 19, 43, 57, -35, -23, 4, -43, 48, -20, 2, -25, 0, -44, -42, 59, -29, 27, 28, -13, -63, -1, 31, 10, 13, -11, -32, -24, 39, -20, -3, -22, -3, -18, 60, 12, 24, 53, 4, 25, -42, -6, -35, 56, -25, 24, -6, -53, 22, 50, -30, 1, -20, -34, -3, -56, -6, -72, 21, 27, 51, -68, 61, -18, 50, 65, -32, 32, -48, -39, 39, 29, 19, -14, -35, 45, 
  -1, 51, 45, -36, -12, -29, -5, 45, -74, -44, 24, -11, -38, 46, 80, -22, -64, -35, 27, 21, 25, -43, -19, -51, 0, 9, 19, 33, -45, 33, 3, -81, -101, -57, -72, -45, -65, -48, 62, -52, -84, -42, -12, -67, 10, -19, 30, -81, 7, 51, -19, -65, -42, 52, -44, -12, -9, 26, -19, 42, 11, 36, -30, -36, 26, 46, 46, 50, -25, -36, 32, 35, 41, 28, -19, 13, 28, -41, 17, -24, -44, 28, -38, -9, 23, -35, -42, -9, -38, 2, 21, -35, 9, 6, -35, 58, -9, -48, 46, -26, -27, -31, 81, -19, 81, -31, 56, 23, 94, 36, 27, 93, -16, 13, -19, 8, 81, 102, -1, -6, 15, 56, -46, 16, 69, 6, 26, -51, 11, 2, 42, 19, -5, 1, 33, 12, 56, -16, 29, -41, -14, 3, -45, -25, 16, 51, 25, -33, 10, -8, 29, 13, -21, -51, 55, 14, 47, -21, -61, 29, 54, 20, 10, 4, -55, -8, -34, 47, -52, -13, 55, -58, -48, 69, -59, 57, 42, -37, -62, 37, -64, 30, -52, 17, 9, -22, -54, -14, 61, 3, -23, -44, 14, 39, -21, -53, -37, 62, 41, -45, 
  -33, 32, 68, 85, 29, 25, 48, -37, -6, -30, -8, -16, 38, -32, -8, 11, -32, 9, 79, 41, -12, -23, -33, -29, 83, -11, 8, 13, 56, -39, -29, -16, 42, 45, 50, -22, 56, -44, 50, -5, 54, 32, 4, -45, 43, 43, 25, -10, -33, 20, -38, 30, -29, 71, 19, 54, -53, 72, -38, 52, 60, 33, -29, 54, 39, -67, -66, 46, 9, -52, -30, 40, 36, 53, 10, 69, 33, -42, -31, 53, 16, -79, -17, -61, -46, 46, 7, -58, -23, 68, 52, -15, 40, -19, -8, 23, 20, -8, -21, 59, -16, 15, 18, 19, 6, -46, -54, 61, 23, -27, -1, 9, -14, 58, 8, -35, 0, -14, 55, 11, -63, -52, -3, -74, 64, 17, 52, 9, 65, 3, 28, -29, 57, 21, -55, -5, -14, 24, -4, 33, -69, 1, 70, 29, 60, -78, 43, -20, -11, 38, -44, -72, -51, -71, -29, -75, 31, 43, -67, -17, -54, 28, -81, -77, -22, -57, -49, -72, -51, 30, -92, -57, 22, -9, 17, 46, -13, -12, -66, 12, -80, -26, -14, -93, -4, 0, -36, -24, -61, -22, -66, -107, -53, 34, -48, -19, -70, -115, -29, -78, 
  31, -39, 23, -5, 22, -48, 82, -32, -20, -38, 46, 9, 20, -13, -21, -33, -15, -51, -49, -52, 38, -8, -16, -50, 17, 35, 19, -18, -7, 54, -71, -44, 8, 31, -3, -11, 54, 17, -31, -22, 68, 6, -20, 16, 24, 41, -39, 47, -36, -35, -33, 53, 68, 45, 52, -79, -73, 43, -32, -10, -53, -15, -50, -50, -17, 43, 26, -13, 52, -69, -48, 49, 25, -55, 18, 11, -26, -6, -20, -51, -43, -44, -61, -41, -27, -3, 7, -9, 10, -25, -23, -55, 23, 11, 2, -54, 26, 13, -32, -23, 41, -32, 65, -43, 5, -18, -19, -1, -44, -78, 24, -58, 26, -78, -82, 42, -44, -24, 48, -64, 3, -18, -17, -13, 44, -59, 20, 40, 27, 12, -70, -65, -65, -37, 31, -61, -55, -72, 34, 52, -22, -45, -35, -87, -9, 47, -37, 16, 24, 0, -28, -31, -42, 64, 27, -74, -16, -57, 7, 57, -67, 55, 33, -80, -25, 23, 45, 49, -21, -28, 65, -63, 60, -55, 35, -47, -27, 25, 50, -27, -57, 58, 15, 55, -13, -72, 58, 66, -51, -17, 20, 60, 10, 29, 37, -35, -64, -18, -26, -83, 
  37, 64, 58, 49, 13, 111, 105, -4, 14, 10, 98, 96, 57, -36, 51, -24, 6, 1, -25, 69, 89, 6, 103, 92, -52, 76, -29, 109, 14, 86, 36, 53, -5, 97, -9, 18, 34, -45, 17, -7, 49, 71, 32, -4, -39, 34, 56, -53, 45, -62, 15, 25, 46, 33, -55, -19, 43, -63, -39, 73, -15, -18, 54, -35, 0, 10, -31, 48, 55, 73, -51, 83, -47, -10, 53, 56, -4, 63, 59, -13, 13, 60, -49, -5, -58, 37, -14, -24, 75, 35, 26, -12, -26, -8, -6, -18, 70, 20, 66, 71, -43, -19, -39, -38, 54, -27, 53, -2, 54, -24, -63, -15, -57, 31, 50, 3, 76, -30, -45, -59, 31, -22, 79, 15, -49, -45, 81, -13, -25, 2, 14, 89, 60, -14, -26, 29, -45, 31, 59, 74, -3, -59, 77, -47, 37, 66, -60, 57, 11, 43, -10, -58, 68, 75, -60, 19, 82, 38, -36, -2, -44, 36, 67, -76, -22, 29, 4, 48, -24, -34, 35, 16, -22, 64, 58, 40, -2, -15, -40, 41, -62, -68, 15, -69, -11, 28, -86, 49, 57, 0, 60, -72, 5, 51, -52, 3, 43, 13, -75, -12, 
  -100, -104, -25, -87, 6, -25, 23, -73, -24, 37, -69, -60, -98, 63, -34, -35, 18, -48, -48, -78, -85, 9, -68, -16, 15, -14, -45, 40, 70, -78, 7, -101, -55, 22, 66, 63, 69, 20, 30, 2, -1, -8, 31, -10, 59, 15, 14, -9, 20, -13, -23, -54, -20, -72, 67, 64, -4, 37, -85, 4, 65, 32, 14, -44, 4, 66, -64, -20, 12, -41, 26, -19, 23, 40, -10, -23, -69, 24, 41, -43, 81, 58, -2, 108, 48, -34, 2, 22, 77, 34, 45, 82, 36, 44, 4, -3, -59, 30, -119, -102, -80, -24, -16, 83, 79, 74, 63, 91, -16, -8, -14, 102, 30, 46, -25, 50, 62, 88, 79, 9, 44, -20, -40, -42, 24, -58, 21, -77, -18, 55, -67, -11, 31, -13, -67, -36, 20, -33, 29, 2, -19, -13, 61, 38, 32, -78, -20, 14, 24, 23, -58, -13, 25, -60, -16, 77, -15, 40, -28, -47, -59, -55, -48, -19, -15, 0, 14, -28, 34, 61, 2, 51, -51, -47, 56, -47, 1, 28, 63, 72, -6, -17, 66, 25, 43, -37, 18, -2, 49, -15, 58, -40, -9, 18, -6, 0, -10, -33, 32, -29, 
  -32, 32, -90, -90, -16, -72, 46, -28, -62, -49, -39, -7, -14, -93, -45, 8, 29, -69, 23, 43, 27, -53, -49, 76, 26, -36, 42, 33, -26, 12, -50, 24, 47, 6, 85, 27, -19, 13, -58, -38, -10, -49, 28, -26, -86, -22, 58, 49, 31, -55, -80, -33, -71, -30, -44, 34, -19, -13, -34, -11, 29, 28, -47, -27, -17, -8, -37, -1, -50, 29, -34, 33, 4, -30, -29, -8, -15, 66, -44, 22, 10, 59, 63, 79, 20, 74, -48, -42, 15, 18, -19, 28, 66, -17, -41, 87, 19, -65, -68, 74, -77, -14, -13, -50, 51, 44, 103, -13, 95, -13, 44, 126, 2, 13, 16, 2, 25, 76, 68, -7, -9, 53, 75, 64, 21, -38, -38, -60, 51, 10, 43, -65, -5, -51, 70, -9, -37, 8, -7, -12, -9, 36, -32, 36, 12, -40, 51, 16, 35, 40, 37, 5, 30, 2, 37, 31, 51, -4, -33, -60, 62, -3, 20, -37, -16, -4, -73, 41, -4, -16, 45, -27, 32, 55, -42, -33, -36, -63, -56, 27, 54, -53, -69, 23, 47, -2, 13, -54, -26, -25, -19, -20, 1, -7, 23, 5, -6, -6, 71, 54, 
  -43, -53, 13, -48, -25, 56, -8, -67, 25, 57, -61, 22, 48, 28, 40, -65, -27, 29, 70, -42, 43, -56, 68, -15, 38, -32, 46, 64, -45, 57, -36, -3, -34, -24, -43, -46, 60, -52, -71, -10, -57, 72, 21, -46, 46, 16, -34, -39, -52, 58, 7, -56, 23, -35, -11, 60, 7, -84, 61, -1, -53, -10, -58, -25, 26, -58, -69, -42, -60, -48, -88, 35, -39, -8, -45, -55, -8, -94, -18, -20, -17, -106, -2, -40, -33, -19, 6, -38, -1, -39, -40, 60, -68, -1, 10, -29, -28, -17, -25, 38, -26, 4, -40, -77, -52, 47, -44, -22, -77, -63, -104, -55, 3, 6, 13, -16, -76, -109, -113, -15, 1, 7, -51, 23, -38, 36, 9, -83, -44, 45, 56, 12, 40, -11, -40, 32, 5, -35, 2, 33, -85, 7, 43, -16, -80, 44, -74, -3, 9, -7, -62, -33, 22, -62, 24, 41, 27, 6, -44, -11, -2, -88, 49, -77, 69, -29, -45, 31, -27, -11, -74, 4, -16, -4, -91, -89, -58, 14, 16, 32, -36, -49, 14, -44, -35, -36, 20, -71, 7, 5, -71, -59, 8, 2, -5, -75, -51, 8, -16, -5, 
  -4, -56, -55, 16, -12, 14, 70, -10, -21, 62, 24, 2, -36, -32, 7, 2, 32, 31, 16, -16, -39, -3, 53, -2, -16, 25, -8, -10, 51, -29, -65, -6, 62, 31, -19, -61, 34, -39, -60, -42, -23, -51, -46, -67, -42, -65, 39, -17, -26, -32, -37, 50, 51, -24, 18, 3, -61, 39, -28, 44, 10, 22, 84, -17, 1, -20, -25, -33, -42, -20, -53, -5, -30, -14, -42, 62, -13, 35, -42, 38, -11, -24, 40, -51, 11, 62, 46, 33, -38, 58, -18, -19, -65, -14, 51, 24, 59, -63, -6, -25, 34, -30, -69, 60, 37, 51, 24, -6, 86, 32, 32, 87, 6, 43, 41, -38, -29, -29, 49, 37, 47, 27, 62, 14, -27, -70, 68, -29, 12, -34, 25, 50, 21, 46, 16, 33, 5, -47, 56, 29, -4, -6, -34, -55, -5, -39, 2, 6, 34, -67, -34, -50, -54, 26, 42, -41, -58, 36, 29, -19, -7, 58, -48, -25, 67, -5, -28, 58, -41, 56, -8, -77, -11, 37, -21, -58, -72, -27, 57, 0, -11, -43, 29, -12, -4, -53, -34, -12, 61, 47, 2, -10, 37, 43, -61, -13, -30, 37, -21, 46, 
  10, -60, -66, 43, 69, -5, -80, 10, 10, -20, -83, -65, 14, -46, 33, 58, 42, -53, -15, -52, 29, -48, 39, -67, -52, -47, -82, -24, 11, 47, -1, -61, -90, -31, 9, -50, -21, -69, 86, 31, 87, 0, 24, 37, 21, -43, -20, 28, 52, 33, -30, 38, -53, -67, -35, -24, 8, -15, -59, -9, -1, 26, -70, 63, 41, 35, 48, 16, 54, 83, -39, 64, 36, 71, 86, 24, 43, 36, 38, -32, 49, 60, -68, -55, -19, 37, -14, 41, -26, 35, 20, -41, -45, -9, -26, -62, -36, 6, 57, -3, -99, -46, 40, -43, -74, 46, 78, 29, -9, -8, 49, -32, 9, 76, -55, 66, 48, 69, -17, 28, 63, 35, 1, -44, 31, 45, 42, 20, 66, 2, 48, -53, -4, -26, -26, -78, 45, -12, -34, -60, -13, -40, -8, -67, -62, 7, 27, -17, 24, -29, -69, -6, 3, -18, 2, 29, -7, -49, 39, 8, -12, 64, -42, -68, 11, -41, 39, -45, 56, 41, -21, 57, -44, 51, 16, 39, 32, 30, 49, -19, -18, 6, -26, -37, 56, 26, 0, -40, 40, -61, 21, -13, 35, 28, -19, -19, 0, -22, 14, -22, 
  -104, -85, -100, -75, -85, 1, -64, -22, -35, 32, 9, 28, -73, -67, 43, 55, 2, 6, -9, -15, 22, 3, -50, -36, 62, -22, 18, 61, -63, -46, 62, 62, 58, 23, 72, 71, -48, 23, 30, 100, 41, 1, 68, 51, -8, -12, -53, -8, -76, -12, -78, -2, -58, 25, -29, 53, -43, 71, 57, 83, 41, 29, -52, 30, 36, 26, 51, -67, -5, 2, 24, 79, 25, -55, -60, -39, 37, -54, -60, 71, -61, 14, -5, -64, -55, 68, -16, 46, -44, 33, -15, 57, 37, 21, -37, -95, -92, -51, 71, 102, 98, 69, 9, -71, 53, -3, -49, -45, 57, -39, 10, -17, 43, 15, 23, 17, -44, 32, 31, 2, 54, -43, -18, -8, -38, 53, 7, -36, 63, -57, 43, -25, -55, 19, -5, -57, -56, 17, 21, 36, 19, 46, 24, -55, 14, 28, -2, -18, 60, 37, 6, -5, -13, -48, -17, -18, 4, -41, 47, -30, 50, -43, 50, -46, -51, 38, -29, 80, -16, -35, 18, -28, 44, -39, 17, -53, 55, 19, 23, -24, -56, -29, -29, -36, 19, 59, -13, 11, 1, -35, 94, 22, -43, 18, 26, -4, 16, -21, 21, -20, 
  106, 39, 56, -35, 73, -26, 0, -19, 71, 3, -35, -34, -36, 0, 19, 10, 0, 35, 5, 60, 37, 72, 5, 39, -20, 8, -17, -41, -36, 30, 31, 33, 58, 12, 17, 46, 73, 19, -32, -53, 64, -40, -41, -27, 39, 55, 51, -30, -15, 68, -26, 39, -23, -14, -64, 9, -37, 42, 44, 56, -55, -7, 21, -73, 71, 6, -42, -29, 53, 67, -27, -42, -34, 86, 16, -24, -10, -10, 72, -31, -53, -23, 18, 48, 0, -11, -30, -17, 55, 13, 43, 23, 41, 64, 7, -36, -31, 67, 51, -50, 38, -11, -47, 0, -46, 53, -83, 39, -5, 26, 59, -37, -25, -33, -21, -9, 15, -53, 45, -34, 37, 66, -15, -79, -52, -37, 24, -24, -42, 47, 8, 31, -18, 29, -61, -21, 14, -10, 0, -26, 36, 19, -2, 77, -51, 52, 19, 76, -60, -5, -49, 65, 46, -18, -75, -14, -77, -90, 26, 24, -33, 70, -15, 77, 49, 57, 9, 11, 14, 12, -47, -79, 21, -57, -12, 5, 13, 38, 26, -68, -26, 69, -44, 60, 31, 24, -32, 5, -69, -40, 45, -2, -66, -73, 40, 21, -88, 33, -46, -2, 
  -31, 48, -43, 20, 9, -2, 0, -22, 61, -24, 40, -64, 64, -7, 49, -13, -52, -64, 84, -13, -42, 33, -38, -30, -10, -36, 33, -21, -59, 5, 48, 3, 70, 6, -54, 69, -21, 75, -53, -43, 67, -68, -38, 52, 42, 27, 16, 54, -6, -63, 23, 12, -28, -55, -17, 37, 15, -16, 58, -25, -25, 30, 36, -49, -18, -26, -81, -67, 49, 59, -5, -5, -53, -79, 14, -30, -33, -13, -12, -50, -85, -51, 15, 23, -107, 19, -70, 32, 6, 26, 16, -35, -61, 19, -7, -41, -24, 42, -49, 19, -9, 53, -49, -41, -42, 12, -11, -28, 10, -72, -54, -66, 30, -67, -47, -24, 40, 28, -62, 8, 33, -70, -29, -61, -1, -46, -5, -43, -40, 53, 74, -19, 20, 58, -62, 42, -18, -87, 58, 3, -24, -14, 57, 21, -33, 48, 34, -57, -67, -1, -3, -49, -13, -25, -66, -5, -63, 58, -28, 64, 74, 43, -37, -2, -3, 21, -65, 23, 18, 61, 63, 24, -58, 34, -39, -74, -10, 13, 81, -43, 5, -47, -30, 40, -9, 4, 4, -28, -71, -32, -6, -70, -20, 5, 50, 4, -15, -19, 50, -4, 
  50, 33, -37, -55, 56, -75, -46, 68, 24, 64, -26, -70, 38, 55, 36, -7, -34, 7, -68, -38, 44, -41, 56, 34, -39, 31, 6, -50, 36, -68, 33, -2, 10, 10, -71, -57, 43, -18, -53, 18, -57, -7, 32, -77, 50, -52, 33, -30, -33, -72, -48, 28, 13, -59, 18, -84, 54, 18, -36, 19, -62, -23, -41, -8, 49, -14, -79, -27, 16, -68, -64, -63, 16, -8, -28, -71, -13, -20, 29, -63, -58, -37, 15, -77, -40, -84, 15, -16, 41, 8, -87, -45, 24, -43, 0, -4, -32, 1, 35, 40, -37, -26, -12, -38, -36, -31, 10, -95, -26, 14, 21, -38, -68, 33, -7, -69, -48, -84, 28, -26, -49, -5, -25, 10, -29, -5, 31, -32, -49, -22, 40, 65, -9, -49, 4, -85, -68, -68, 35, -12, -76, -82, -75, 0, -34, -86, -17, 55, -27, -10, -64, 25, -25, 37, -20, 37, -69, -39, -72, -33, -71, -7, -2, 68, 1, -48, 16, 24, -87, -8, 5, 4, -30, 54, -16, 19, -34, -64, 54, -41, -38, -54, 25, -10, -89, 10, -48, 3, -39, 10, 35, -1, 40, -38, 32, -78, -63, 47, 7, -2, 
  -68, -37, 14, -27, -60, -22, 37, -75, -37, 45, -38, -1, -67, 58, 3, 37, 50, 41, -5, 87, 70, 19, -10, 2, 2, -30, 23, 27, 7, -83, -21, -105, -37, -100, -31, -13, 33, 26, -85, -56, 3, 45, 7, -46, 4, 35, 18, -38, -26, 22, 58, 33, -95, -23, 30, 9, -26, -27, -63, 37, 54, -49, -15, -18, -3, -29, 58, 41, -33, -58, 47, -57, -47, 67, -44, -33, -41, -22, 5, -54, 67, 35, -42, -8, -66, 48, -24, 2, 3, 47, -20, 52, -18, -43, -10, -78, -64, -43, 38, -33, 7, 22, 62, 38, 53, 10, 70, -7, 45, 112, 35, 74, 123, 54, 70, 50, -7, 68, 44, 70, -52, -17, 36, 18, -12, -45, 45, -28, 24, -23, 3, 25, -38, 45, -6, 6, 8, 5, -22, 7, 62, -20, -73, 50, 1, 26, 16, 7, -29, -70, -38, -11, 31, 16, 15, -38, -23, 10, -58, 50, 19, 12, 2, 3, 25, -69, 24, 26, 57, 49, 20, -40, -36, 59, -59, -8, 8, 11, -71, -74, -48, -53, 32, -45, -10, 41, -68, 15, -30, 18, 39, 30, -66, -10, -33, 21, 69, 24, -45, 72, 
  22, -12, -76, 45, 31, 30, -52, -27, -56, -52, -56, -44, 22, -25, 10, -20, 64, -1, -60, 6, -17, 30, 31, 3, 24, -66, 24, 8, -59, -41, 59, -47, 1, -35, 54, 23, 41, -16, -39, 7, 73, 31, -20, 56, 9, -5, -26, 52, 59, 4, 55, -18, -42, 55, 8, 3, -63, -34, -55, 15, -74, 54, -14, -33, -79, 2, -38, 25, -76, -64, 17, -53, -43, -26, -19, -58, -11, 29, -37, -56, -88, 10, -25, -60, -21, -32, -7, -16, -12, 26, 8, -44, 3, -36, -12, 20, 8, -68, 43, 10, 42, -29, -5, 42, -63, -25, 36, -64, -25, -57, -12, -21, 22, -85, 16, 55, -51, -29, 20, -72, -25, 27, -89, 44, 23, -42, -36, -16, 58, -15, 39, -53, -28, 10, -37, 51, 9, -73, 31, -19, -1, 5, -4, 3, 44, -33, -10, -67, -9, -69, 6, 55, 75, -59, -48, 55, -46, 52, -53, -54, -50, -23, -81, 19, -15, -18, -65, 38, 36, -70, -31, -3, 48, -85, -28, -26, -5, -66, -49, -35, -76, -11, -65, -42, 58, -61, 8, -76, -37, -103, 21, -21, 9, -35, -31, -27, 13, -93, -22, -48, 
  57, 22, 29, 7, -44, 65, 73, -5, 70, 37, 46, -44, 12, -16, 45, 45, 11, 9, 7, -16, 39, 69, -55, -16, 33, -3, 19, 36, 16, 22, 3, -3, 6, -24, 49, -28, -27, -32, 37, -4, -32, -37, 7, -52, 60, 50, -52, 85, -42, 18, 67, 14, -11, 29, 39, 21, 60, -55, -56, 47, 62, -31, -39, 40, -17, -40, 43, 16, 67, 5, 30, 22, -46, -53, 46, -7, 11, -81, -68, 52, 1, -54, -18, -58, 50, 49, 28, 24, -36, 27, -28, -62, -4, 51, 14, -43, 1, 2, 24, -33, 17, -5, 1, 53, -57, -44, 21, 26, 21, 20, 39, 1, -76, -4, 61, -30, 37, 17, -68, 54, -40, -80, -13, -54, -50, 39, -45, 46, -76, 2, 52, 43, 39, 62, -13, 65, 15, -54, 19, -18, -24, 34, -90, -23, -73, -27, -75, -56, -79, 63, 9, -3, -29, -20, -37, -37, 38, 74, 33, -16, 20, -54, 45, -78, -90, -69, 21, -89, 5, 42, -47, -53, -47, -21, 23, -12, 23, -14, 13, -71, -83, 26, 39, -29, 9, -31, 26, 15, 31, 38, -78, -50, -89, 0, 0, 41, 22, -91, -78, -44, 
  -30, 60, 64, -48, 19, -35, -7, 60, 35, -12, -14, -46, -15, 35, -65, -38, -43, -55, 30, -35, -38, -39, -69, -15, 47, -32, -12, 59, 16, -4, -43, -44, 62, 56, -17, 68, 3, 49, -34, -18, 41, -60, -2, 22, -10, -28, 18, -41, -17, 73, -21, 62, 74, 0, -67, -1, 49, -16, 44, 19, 38, 48, 57, 20, 10, 47, 41, -41, -69, -40, 19, 9, -45, 45, 27, -41, -64, -1, 12, -93, 49, 12, -5, 14, -53, -15, -10, -6, 7, -47, -28, 30, 8, 0, -8, -55, 52, -58, -40, 10, -5, -14, -31, -26, -52, -23, 17, -88, 26, -80, -67, 7, 19, -95, 15, 7, 36, -51, 38, -63, 41, 18, -65, 31, 8, -40, 29, 56, -43, -24, -62, 2, 5, 30, 17, -56, -11, -66, -50, -2, 63, -50, 63, 38, -2, -40, -14, 50, 3, -30, 69, 39, -68, 15, -53, -15, 32, 5, 7, 13, 25, 44, -21, 10, 29, -73, -53, 39, -80, -64, 7, -32, -61, -49, -28, -45, -65, -63, 50, -36, 34, -80, -55, -22, -23, -1, -49, -31, -94, 26, 37, -70, -62, -71, -70, -50, -66, -31, -23, 52, 
  -27, -70, 3, 4, -15, 19, -21, -46, 1, -28, -56, -2, -48, 50, -22, 8, -43, -62, -78, -55, -35, 16, 29, -78, -72, -3, 34, -21, -17, -55, -76, -85, -92, -75, 6, 15, 21, 31, -77, -14, -44, -46, 45, 35, -15, 41, 59, 28, -5, 39, -48, 14, 27, 86, 50, -47, 69, -46, 37, 65, 26, 6, 29, -56, 43, -10, 39, 14, -1, -27, -20, -42, -11, -54, -26, 29, -18, -13, 56, -46, 51, -16, -9, -22, -38, 19, 59, 28, -62, -59, 60, 71, -19, -38, 14, -52, 13, 89, -31, -33, -58, -38, -28, -6, 5, -34, 48, 63, 38, 81, -7, 45, 11, 38, 32, 58, 27, 14, 72, -24, 84, 59, -32, 9, -45, 42, 71, -6, 51, 82, -24, -18, -62, 73, 41, -53, -24, 47, 55, 9, 57, -45, 35, 8, -2, -19, -48, -32, -1, -5, -41, -8, 61, -33, -54, -60, 67, 6, -74, 1, -33, -1, 37, -24, -54, 44, 67, 25, -31, -20, -8, -35, -24, -7, -46, 65, 28, 54, 53, -65, -48, 20, 52, 39, 44, -6, 9, -29, -26, 30, 58, 2, -46, 46, 28, -20, 19, 8, -48, -30, 
  88, 41, 75, 115, 61, 84, -27, 68, 11, 88, 26, 79, 57, 25, 5, -31, 32, -26, -35, 0, -9, 12, 54, 31, 1, 82, 46, 36, 31, -42, 6, -5, -12, 34, 33, 28, -39, -35, -34, -47, 69, -13, -5, 27, 40, 73, -2, 55, 11, -51, 13, -17, 9, -57, -21, -18, -30, 47, -54, 84, -37, -6, -21, -35, 39, 42, 55, 56, 17, 53, 70, -23, 81, -46, -48, 4, 71, 30, 11, 42, 35, -38, -22, -9, 23, 3, -19, -15, 15, -20, -59, 2, 24, -12, -64, 57, -8, 33, 9, 9, -58, 51, 53, -31, 69, -27, 57, 17, -51, -73, -48, 31, -84, 0, -36, 9, -84, 54, -28, 38, 64, 44, 11, -1, -27, 35, -17, -67, -51, -26, 78, 20, -13, -13, -70, -33, 20, 68, 30, -14, 33, 63, 78, -47, -6, 47, 47, -74, 43, -30, -58, 74, 0, 36, 36, -44, -4, 78, -11, 51, 10, 46, 7, 77, 69, 69, -83, -62, -21, -29, 19, 21, -26, -16, 42, 46, 7, -63, 75, 47, 18, 12, 68, -19, -21, 15, 39, 11, 72, -69, 0, -7, 27, 1, 15, -31, 12, 51, -6, -31, 
  75, -66, 80, -21, 56, 0, 2, -50, 4, 28, -32, 51, -41, -11, 38, 16, -22, 32, -25, 52, -30, -11, -57, -32, -18, 55, 83, -10, 56, -18, -38, 70, 60, 38, 47, -13, 50, 35, 17, -68, -48, -17, -11, -58, -6, 17, 75, -2, -4, 54, -57, -47, 2, 74, -31, -67, 2, 57, -50, -58, 10, -20, 25, 10, -12, -16, 52, 44, -20, -36, 9, -35, -69, 34, -45, 12, 17, -24, 35, -1, 17, -63, 48, 3, -14, 23, -22, 40, 28, 53, -26, 15, 32, 15, -32, -51, 41, -49, -8, 31, 60, -5, -27, 8, -54, -13, -48, 23, -25, -41, -70, -90, 0, -61, -15, 62, -54, 38, -74, 34, 58, -6, -31, 18, 61, -53, 37, -34, 36, -23, 29, 12, 57, 5, 14, 49, 48, -5, -59, 51, 39, 26, 6, 56, -65, -81, -42, -23, -27, -40, -3, -34, -85, -55, 25, -46, -28, 4, -20, -90, 22, -48, -13, -53, -38, -44, -34, -47, 8, -89, -15, -15, -72, 25, -54, -102, 12, -42, -49, -72, -36, -104, -97, -33, 5, -9, 11, -80, -20, -63, 9, -20, -78, 28, -13, -89, 0, -95, -46, -99, 
  -18, 25, 55, 10, -57, -29, -70, -22, 4, -11, -52, -35, 36, -26, -41, -53, 4, -55, -55, -14, 2, 17, -66, -26, 34, -46, 37, 11, 48, -44, 22, 27, 58, -6, -57, -54, -56, 11, -9, 5, 34, 47, 53, -3, 44, -64, 9, 45, -55, 44, -31, 68, 35, 47, 9, 40, 5, -29, -34, 46, 42, 10, -43, 56, 24, -2, 34, 45, -69, -41, 8, -35, 56, -40, 14, 29, 25, -7, -53, -42, -53, 52, -43, 0, -24, 8, 28, 40, 38, 37, -2, 41, -33, 58, 57, -87, -82, -90, -93, 27, -37, 10, 40, 50, -17, 39, -12, -2, 65, -12, -23, 48, 20, -7, 76, 31, 25, -51, 52, 37, -3, -41, -12, -12, -57, -54, -15, -13, -44, -42, 15, -19, 35, 32, 31, -15, 49, 20, -34, 10, -74, 27, 24, -47, 38, 46, -24, -20, 16, 66, -2, 8, 17, 40, -25, -4, 52, 18, -16, -42, -21, -25, 28, 57, 17, 3, -31, -37, -22, -53, 32, 1, 6, -72, -9, -47, 45, 6, -14, -45, 62, 52, -37, -29, -36, 53, -50, 21, -57, 7, 44, 53, 44, -3, -46, -39, 64, 14, -17, -9, 
  1, 67, 15, -74, 50, -74, -41, 42, -49, -5, -29, 15, -24, 48, 33, 17, -79, -4, -17, -36, 21, 33, -62, 2, -54, 74, -32, -32, -44, 60, 0, 26, 54, 31, 14, 26, -66, -63, 42, -21, 7, -33, -100, 51, -14, 82, 55, 48, 41, -28, -40, -47, -43, -41, 34, -38, 52, -72, -13, -18, -3, -77, 54, -49, -15, 57, -45, -37, 24, -82, -6, 28, -1, -109, 17, 3, -55, -110, 22, 1, -71, -71, -23, 34, -56, -70, -54, -13, 31, -21, -32, -32, 6, -20, 28, -54, -35, 14, -27, 35, 58, -9, -7, 23, -81, 19, 11, -90, 24, -102, -53, 10, -93, -54, -22, -74, -6, -15, 8, -105, -6, -87, 31, -61, -59, -53, -15, -96, -43, -20, 12, -69, -10, 27, 57, 41, 65, -30, 7, -60, -19, -43, -11, -72, -13, -8, 29, 14, -16, -22, -26, 26, 10, -57, 28, -47, 25, -18, 17, -83, 2, -41, 47, 53, -60, -19, -31, -63, -50, -40, -101, -15, -48, -28, -61, -39, -52, 27, -71, -29, 25, -58, -55, 10, -86, -102, -60, -74, -27, -32, -53, 38, 18, -76, -23, 37, -63, 5, -74, 28, 
  39, 91, -21, 75, -30, -41, 87, 101, -43, 36, -36, -53, 26, 42, -52, -55, 51, -70, 60, 27, 12, -6, 89, 2, 22, 29, 42, 21, 24, -43, -21, 9, -22, -6, 69, -64, 30, 19, 51, 49, 45, 69, -26, 26, 36, 11, 85, 17, -26, -25, 10, -51, -29, 33, -13, -22, 39, 82, 97, 30, -7, 104, 53, 44, 55, -32, -48, 38, -15, -21, -1, -37, 41, -35, 49, -33, 88, 13, -41, -29, -4, 21, -38, 67, -21, -53, -28, 31, -37, 76, -11, 31, 49, -49, -19, 36, 64, 5, 58, 11, 32, 5, 59, -16, -19, 46, 21, -82, 1, 55, 8, 3, 15, 11, -43, 50, -42, 77, -46, 80, -3, 38, -28, 67, -1, 13, -64, -85, -59, 43, -69, -55, -60, 18, 78, 51, -59, 22, 37, -22, 37, -71, 38, 51, -36, 19, 47, 67, 38, -53, 70, -73, -11, -55, -90, -7, -89, -65, -17, -6, 38, -88, 9, -50, -35, -88, -50, 28, -80, -3, -79, -6, 20, 6, -14, -64, -19, -75, 32, -89, -67, -79, -76, -47, 8, -54, -102, -24, 7, -60, 1, -110, -77, 18, 26, -95, -84, -103, -127, -96, 
};
const TfArray<2, int> tensor_dimension22 = { 2, { 32,200 } };
const TfArray<1, float> quant22_scale = { 1, { 0.002173721557483077, } };
const TfArray<1, int> quant22_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int32_t tensor_data23[3] = { -1406, -2807, -1889, };
const TfArray<1, int> tensor_dimension23 = { 1, { 3 } };
const TfArray<3, float> quant23_scale = { 3, { 3.9552840462420136e-05, 1.9809056539088488e-05, 2.9437916964525357e-05, } };
const TfArray<3, int> quant23_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int8_t tensor_data24[3*1*1*4] = { 
  /* [0][0][][] */ -74,127,83,-89, 
  /* [1][0][][] */ 127,-73,67,-108, 
  /* [2][0][][] */ 87,-108,127,48, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 3,1,1,4 } };
const TfArray<3, float> quant24_scale = { 3, { 0.0074376258999109268, 0.0037249499000608921, 0.0055355876684188843, } };
const TfArray<3, int> quant24_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[4] = { 901, -726, 365, 1071, };
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const TfArray<4, float> quant25_scale = { 4, { 9.1726702521555126e-05, 8.06319949333556e-05, 8.7900756625458598e-05, 6.0981823480688035e-05, } };
const TfArray<4, int> quant25_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int8_t tensor_data26[4*1*1*3] = { 
  /* [0][0][][] */ -34,127,50, 
  /* [1][0][][] */ -127,54,-84, 
  /* [2][0][][] */ -127,-70,-72, 
  /* [3][0][][] */ -19,-127,86, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 4,1,1,3 } };
const TfArray<4, float> quant26_scale = { 4, { 0.0068032690323889256, 0.0059803868643939495, 0.0065195029601454735, 0.0045229550451040268, } };
const TfArray<4, int> quant26_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(2) int8_t tensor_data27[3] = { -62, -128, 127, };
const TfArray<1, int> tensor_dimension27 = { 1, { 3 } };
const TfArray<1, float> quant27_scale = { 1, { 0.00025838689180091023, } };
const TfArray<1, int> quant27_zero = { 1, { 44 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(2) int8_t tensor_data28[3] = { 99, 48, 127, };
const TfArray<1, int> tensor_dimension28 = { 1, { 3 } };
const TfArray<1, float> quant28_scale = { 1, { 0.0047668688930571079, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int32_t tensor_data29[3] = { -2701, -3565, -3775, };
const TfArray<1, int> tensor_dimension29 = { 1, { 3 } };
const TfArray<1, float> quant29_scale = { 1, { 8.1166417658096179e-06, } };
const TfArray<1, int> quant29_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[3*128] = { 
  -66, -99, -53, -34, 85, -52, -127, -28, 50, 53, -40, 1, 64, 75, 35, -1, -42, 57, 67, -41, -55, 39, 67, 4, -77, -109, -42, -7, 88, -36, -102, 27, 30, -81, -22, 104, 73, -79, -50, 30, -106, -59, -93, -7, 44, 87, -18, -14, -8, 58, 58, 101, -112, 21, 8, -22, -22, 36, -96, 23, -87, -53, 60, 28, 119, -79, -14, 120, -67, 9, 7, 47, -54, 23, -73, 127, 33, 40, -54, -68, -57, 86, 51, 27, 38, -74, -43, -38, 36, 61, -96, 69, -68, 51, 51, 56, 57, 25, -75, 88, -44, -15, 117, -72, -95, 114, 37, -73, -114, -71, 41, -32, -66, 63, 12, 1, -93, 11, -55, 69, -36, -85, 69, -39, 26, 84, 88, -18, 
  -62, -52, -85, 86, -23, 84, -46, 0, -73, 62, 10, -16, -19, 88, -9, 51, 73, -61, -54, -79, -31, -73, 3, -91, 66, 54, 32, -51, -21, -36, -9, -75, -94, 97, 4, -82, -103, 95, -93, -12, 66, -11, 43, -24, 22, 104, -76, -28, 16, -34, -84, -44, 16, -41, 74, 39, -36, 40, 82, 2, 56, -5, 27, -91, 11, 47, 26, 76, -36, 103, 90, -7, -47, -45, -4, 8, -55, 12, -41, -29, -47, 19, -60, -93, 39, 50, -7, 32, 31, -2, -101, -79, 62, -7, 56, 60, 89, -89, 19, -100, -93, -51, -51, -54, -4, 5, 85, -55, -61, 71, 69, -54, -23, -18, 29, -22, 14, -80, 32, -51, 13, 2, -77, -38, -79, -73, 12, 38, 
  -50, -95, -92, 68, -85, -45, 62, 25, 19, -56, -32, 15, -58, 17, 90, 10, 57, 88, -88, -15, 78, -91, 36, 84, 4, -57, -88, 79, 34, 25, 61, 58, 64, 76, 41, 96, -50, 107, -78, -4, 75, -106, 64, 49, -16, -27, 95, -71, 85, -50, -20, -25, 9, -86, -73, 42, 89, -29, -66, 24, -76, 3, -45, -53, -67, -80, 55, -13, 21, 22, 92, 8, 104, -79, -74, 24, 48, -60, -97, -56, 14, -21, 12, -47, 12, 74, -48, 86, 83, 13, -30, 42, 28, -16, 53, 60, 91, -109, -69, -35, -73, 54, -85, 67, 67, -3, 50, -85, -64, 68, 17, -101, 103, 62, 15, 37, 68, -91, 98, -48, -58, 84, -37, -31, -88, -28, 74, 10, 
};
const TfArray<2, int> tensor_dimension30 = { 2, { 3,128 } };
const TfArray<1, float> quant30_scale = { 1, { 0.0020482146646827459, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[128] = { 1391, 1312, 1459, -1526, 1265, 331, 840, 9, 7, -482, 1169, 524, 1444, -1276, -1365, -1442, -1584, -1124, 1512, 1292, -458, 1557, -1146, -520, -86, 1100, 1304, -1216, -1151, 962, 286, -397, -512, -1540, -1719, -1043, 1410, -1567, 1455, 339, -1564, 1385, -1145, -705, -1283, -1361, -891, 1492, -1505, 1440, 1242, 100, 763, 1506, 365, -1425, -1262, -1029, 985, -1402, 1162, 1015, -931, 1394, -106, 1113, -1678, -1315, 1055, -1513, -1511, -996, -1080, 1394, 1331, -1214, -647, 1199, 1467, 1376, 1372, -1022, 127, 1557, -1349, -1677, 1276, -1494, -1339, -1265, 1411, -693, -1209, -512, -1306, -1401, -1383, 1554, 1203, 1430, 1492, 234, 1432, 789, -209, -1099, -1418, 1403, 1390, -1691, -1293, 1496, -1292, -1320, -1478, -750, -869, 1504, -1687, 1341, 1264, -1095, 1509, 1478, 1445, 1160, -1366, -1247, };
const TfArray<1, int> tensor_dimension31 = { 1, { 128 } };
const TfArray<1, float> quant31_scale = { 1, { 2.0706595023511909e-05, } };
const TfArray<1, int> quant31_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[128*3] = { 
  72, -17, 59, 
  71, 17, -84, 
  -69, -59, 67, 
  8, 77, -22, 
  52, 85, -78, 
  15, -98, -8, 
  102, 34, 83, 
  -16, -49, 2, 
  54, -28, -65, 
  -76, 48, 68, 
  -38, 52, 6, 
  -23, -2, 64, 
  -47, 1, -17, 
  -106, -50, 82, 
  -101, 66, -28, 
  36, -67, -51, 
  7, 17, -91, 
  -99, 35, -24, 
  68, 6, 47, 
  38, 7, -8, 
  -74, -12, 34, 
  -74, -94, -30, 
  -98, -59, -6, 
  -75, -5, 80, 
  -55, -42, 86, 
  35, -114, 34, 
  111, -24, 81, 
  46, -3, -42, 
  -42, 23, -41, 
  34, -9, -45, 
  69, 9, 27, 
  -65, -31, 38, 
  59, 39, 3, 
  -34, -76, -75, 
  47, -7, -49, 
  -109, -13, -39, 
  37, -64, -14, 
  11, 19, -30, 
  -48, -32, 57, 
  -105, 66, 37, 
  60, -5, 3, 
  90, -41, 58, 
  52, 6, 98, 
  -41, -79, 44, 
  -24, 5, -64, 
  7, 101, -87, 
  30, 69, 7, 
  47, -87, 101, 
  -53, 71, -71, 
  44, -78, 91, 
  -8, -23, -23, 
  -127, 85, -92, 
  114, -32, 33, 
  -9, 48, 58, 
  38, -10, -60, 
  -57, 32, 1, 
  -2, 74, 45, 
  14, -79, -36, 
  69, -50, 103, 
  62, -32, -72, 
  -65, -99, -49, 
  69, -93, -20, 
  59, 36, -8, 
  100, 6, -90, 
  -43, 62, -101, 
  81, 39, 16, 
  92, 63, 7, 
  -1, 53, -49, 
  59, 34, 32, 
  17, 83, -56, 
  -45, -25, -55, 
  -100, 53, 65, 
  -83, 2, -7, 
  31, 88, -42, 
  -80, -1, -22, 
  -103, 29, -64, 
  -42, -29, 46, 
  95, 84, 25, 
  71, -15, 94, 
  111, 49, 91, 
  42, -4, 55, 
  -92, -50, -101, 
  41, 40, -62, 
  64, 84, 112, 
  -91, -21, -47, 
  -8, -89, -89, 
  64, 16, 5, 
  -61, 37, 61, 
  -82, -73, 83, 
  -4, 11, -96, 
  51, -85, 88, 
  18, 60, -86, 
  46, 15, 31, 
  -122, -22, 27, 
  -66, -72, -71, 
  15, 22, 2, 
  -2, -72, 18, 
  81, 63, 102, 
  -47, 67, -63, 
  -26, 30, 60, 
  49, -75, 109, 
  -13, 23, 51, 
  -111, 98, 34, 
  -44, 1, 34, 
  93, 29, 95, 
  -65, 100, -47, 
  -95, 69, 49, 
  84, -94, -41, 
  66, -91, 69, 
  97, 62, -82, 
  0, -76, 25, 
  -90, -101, -65, 
  -91, -31, 26, 
  22, -39, -79, 
  -105, -51, -114, 
  -85, -82, -73, 
  83, -30, -49, 
  81, -6, 41, 
  19, 68, -90, 
  34, 1, 9, 
  -39, 79, 12, 
  34, -36, -14, 
  -22, -4, 93, 
  -61, -94, -36, 
  -35, 86, -67, 
  -115, 79, -65, 
  32, -61, -105, 
  -65, -45, -94, 
};
const TfArray<2, int> tensor_dimension32 = { 2, { 128,3 } };
const TfArray<1, float> quant32_scale = { 1, { 0.0017102927668020129, } };
const TfArray<1, int> quant32_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[128] = { 3399, 1853, -2289, -3087, 2908, 3347, 4372, 4197, 4020, 3403, 3361, -4351, -4813, -2693, 3073, -3306, 3283, -2413, -6499, 477, 2192, 2766, 1991, 5110, 3858, -3489, -5901, 2861, 3451, -3436, -2675, 4963, 2895, -5919, -3763, 5057, -2835, 3354, -2126, 2399, 3431, 4435, -3560, -3047, 2181, 3070, -3522, -3777, 3505, -2693, -1559, -2578, 3739, 1694, 3528, -3524, -4497, 3064, 3848, 2926, 3461, 4145, -4389, 4624, -5130, -2762, -2914, 3973, 64, -2485, -4283, -3948, -3600, 5153, 4038, -1596, 1976, 1664, -4087, -3019, -1345, -2108, 2419, -4835, -4906, -3587, -4710, 5903, 765, 3443, 1726, 3645, -972, 3899, 6518, -5589, -3246, 851, 2853, -6482, -1684, 3119, -2091, 1761, 3040, 4115, 3038, -2873, 3627, -2764, -4170, -3680, 2130, 7762, -2308, 2893, 2609, 2929, -2497, -7827, -2416, 2415, -6436, -2723, 3002, -6149, 3537, 3142, };
const TfArray<1, int> tensor_dimension33 = { 1, { 128 } };
const TfArray<1, float> quant33_scale = { 1, { 4.3417076085461304e-06, } };
const TfArray<1, int> quant33_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[128*3] = { 
  31, -71, 49, 
  -52, -107, 17, 
  18, 90, -85, 
  -53, 111, 2, 
  69, -94, -3, 
  11, -117, 48, 
  73, -80, 42, 
  32, -31, 67, 
  71, -79, 1, 
  -20, -83, 60, 
  88, -104, 70, 
  -50, 78, -1, 
  -70, 19, -44, 
  -7, 77, -52, 
  77, -1, -15, 
  20, 92, 11, 
  30, -79, 68, 
  16, 60, -5, 
  -78, 61, 68, 
  -14, -15, 70, 
  -9, -85, 70, 
  13, -61, 82, 
  33, 2, -73, 
  74, -68, 4, 
  30, -116, 22, 
  13, 121, 1, 
  -44, 52, -41, 
  -34, -42, 56, 
  88, -103, -9, 
  -6, 113, -22, 
  7, 47, -17, 
  66, -51, -36, 
  -33, -17, 28, 
  -79, 52, -47, 
  -87, 116, 0, 
  95, -21, -9, 
  -74, -27, 11, 
  60, -83, 21, 
  -24, 33, -98, 
  42, 4, 10, 
  16, -64, 12, 
  91, -89, -22, 
  -85, 62, -80, 
  -59, 103, -35, 
  21, -103, 90, 
  25, -65, 7, 
  -45, 89, 5, 
  -20, 84, -42, 
  69, -39, 64, 
  -38, 62, -43, 
  23, 48, -49, 
  29, 99, -91, 
  35, -115, 10, 
  -14, 9, 76, 
  -9, -61, 0, 
  -77, 1, 0, 
  -58, 101, 11, 
  81, -42, -12, 
  62, -56, 11, 
  22, -3, 82, 
  83, -68, 52, 
  7, -103, 15, 
  -86, 73, -46, 
  59, -12, -52, 
  -44, 83, -25, 
  -31, 74, 16, 
  -64, 84, -11, 
  81, -38, -13, 
  -29, -33, 28, 
  -36, 54, -82, 
  -97, 43, -54, 
  -55, 100, -48, 
  -52, 62, -8, 
  3, -84, 28, 
  53, -109, 26, 
  -79, 105, -53, 
  24, -78, 36, 
  60, -108, -33, 
  -105, 68, -79, 
  -39, 43, -28, 
  -3, 61, -78, 
  -46, 4, -69, 
  57, -109, 33, 
  -32, 110, -29, 
  -78, 37, 14, 
  -53, 70, 0, 
  -82, 125, 9, 
  90, -61, -3, 
  -42, -100, 68, 
  5, -94, 49, 
  -23, -114, -2, 
  -9, -110, -4, 
  13, 75, -53, 
  90, -35, 64, 
  37, -39, 22, 
  -91, 103, -41, 
  17, 69, -49, 
  17, 11, -18, 
  57, -68, 40, 
  -44, 103, 11, 
  11, 94, -62, 
  50, -109, 45, 
  -49, 75, -67, 
  50, 23, -29, 
  -11, -115, -1, 
  -20, -36, 90, 
  -24, -119, 28, 
  -16, 89, -11, 
  72, -78, 24, 
  6, 127, -51, 
  -44, 33, 20, 
  -96, 113, -68, 
  -20, -111, 85, 
  53, -4, 66, 
  -55, 9, -10, 
  48, -40, 88, 
  20, -101, 78, 
  16, -121, -20, 
  -9, 56, -1, 
  -44, 47, -30, 
  -12, 98, -4, 
  50, -125, 86, 
  4, 67, -55, 
  -41, 100, -60, 
  72, -44, 5, 
  13, 56, -52, 
  27, -126, 52, 
  58, -103, 67, 
};
const TfArray<2, int> tensor_dimension34 = { 2, { 128,3 } };
const TfArray<1, float> quant34_scale = { 1, { 0.00035860994830727577, } };
const TfArray<1, int> quant34_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int32_t tensor_data35[128] = { -1, 0, 0, 2, -2, -1, -1, 0, -2, 0, -2, 2, 1, 0, -1, 1, -1, 0, 3, 1, 0, 0, -1, -2, -1, 1, 1, 1, -2, 1, 0, -2, 1, 2, 3, -2, 1, -2, 0, -1, -1, -3, 1, 2, -1, -1, 2, 1, -1, 1, 0, -1, -2, 1, 0, 1, 3, -2, -1, 0, -2, 0, 2, -2, 1, 1, 1, -2, 1, 0, 1, 1, 1, 0, -1, 1, 0, -1, 1, 1, 0, 0, -1, 1, 2, 1, 2, -2, 1, 0, 0, -1, 0, -1, -1, 1, 0, -1, -1, 2, 0, -1, 1, -1, -1, 1, 0, 1, -1, 0, 2, 1, 0, -1, 1, -1, -1, -1, 1, 1, 1, -1, 0, 0, -1, 0, -1, 0, };
const TfArray<1, int> tensor_dimension35 = { 1, { 128 } };
const TfArray<1, float> quant35_scale = { 1, { 3.6370172892929986e-05, } };
const TfArray<1, int> quant35_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[128*3] = { 
  92, -73, 57, 
  12, -83, 88, 
  -47, 98, -80, 
  -33, 64, -49, 
  36, -90, 34, 
  18, -108, 5, 
  109, -36, 7, 
  75, -42, 43, 
  93, -70, -9, 
  55, -51, 28, 
  25, -114, 2, 
  -125, 29, -20, 
  -123, 80, 37, 
  -51, 94, -67, 
  47, -2, 20, 
  -42, 60, -45, 
  85, -50, 69, 
  -18, 44, -14, 
  -25, 26, 43, 
  -34, -65, 35, 
  18, -72, 80, 
  81, -23, 97, 
  -5, -18, -91, 
  110, -7, 5, 
  24, -104, 4, 
  -107, 48, -73, 
  -111, 23, -28, 
  30, -47, 16, 
  83, -54, 34, 
  -74, 90, -29, 
  -52, 91, -66, 
  80, -32, -65, 
  47, 1, 21, 
  -73, 40, -1, 
  -80, 94, 15, 
  66, -29, -45, 
  -69, -20, 70, 
  98, -79, 46, 
  -23, 78, -77, 
  46, 6, -31, 
  127, -109, 54, 
  81, -49, -27, 
  -94, 55, -58, 
  -97, 80, -73, 
  11, -104, 76, 
  55, -78, 52, 
  -25, 101, 4, 
  -68, 92, -1, 
  123, -84, 52, 
  -34, 70, -80, 
  -9, 61, -66, 
  -52, 82, -56, 
  41, -102, 0, 
  29, -21, 40, 
  99, -96, 40, 
  -80, 51, 18, 
  -26, 87, 29, 
  84, -54, 34, 
  80, -51, 23, 
  72, -17, 61, 
  123, -87, 39, 
  51, -71, 28, 
  -81, 72, 32, 
  7, -26, -62, 
  -107, 29, -53, 
  -53, 80, -24, 
  -57, 87, -28, 
  71, -16, 15, 
  -22, -44, -31, 
  -62, 85, -20, 
  -120, 44, -18, 
  -113, 101, 25, 
  -47, 90, 13, 
  87, -84, 9, 
  79, -90, -15, 
  -22, 117, -78, 
  49, -109, 54, 
  -6, -102, 49, 
  -82, 62, -16, 
  -69, 56, -48, 
  -40, 41, -48, 
  -88, 85, -51, 
  43, -111, 33, 
  -98, 46, -40, 
  -76, 53, 65, 
  -113, 90, 9, 
  -71, 50, 0, 
  105, 7, 12, 
  20, -44, 49, 
  92, -15, 48, 
  34, -100, 53, 
  78, -118, -28, 
  -40, 60, -75, 
  108, -113, -31, 
  105, -48, -66, 
  -94, 31, -26, 
  -36, 68, 22, 
  3, 17, -5, 
  85, -73, 67, 
  -112, 24, 28, 
  -34, 53, -41, 
  38, -110, -10, 
  -52, 75, -73, 
  37, 41, 36, 
  109, -116, 10, 
  68, -32, -16, 
  82, -82, 5, 
  -106, 66, -67, 
  109, -106, -17, 
  -85, 17, -64, 
  -7, 35, 19, 
  -87, 67, -15, 
  66, -87, 29, 
  126, -5, -10, 
  12, 60, 15, 
  85, -29, 51, 
  73, -57, 35, 
  120, -78, 53, 
  -47, 68, -31, 
  -49, 65, 41, 
  -45, 125, -36, 
  89, -33, 76, 
  -81, 61, 44, 
  -96, 76, -44, 
  32, -49, 23, 
  -106, 11, 27, 
  26, -95, -20, 
  95, -39, 51, 
};
const TfArray<2, int> tensor_dimension36 = { 2, { 128,3 } };
const TfArray<1, float> quant36_scale = { 1, { 0.0030040498822927475, } };
const TfArray<1, int> quant36_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(2) int8_t tensor_data37[3] = { 125, -128, 127, };
const TfArray<1, int> tensor_dimension37 = { 1, { 3 } };
const TfArray<1, float> quant37_scale = { 1, { 0.00037445506313815713, } };
const TfArray<1, int> quant37_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(2) int8_t tensor_data38[3] = { 123, 127, 117, };
const TfArray<1, int> tensor_dimension38 = { 1, { 3 } };
const TfArray<1, float> quant38_scale = { 1, { 0.004181690514087677, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const int8_t tensor_data39[1] = { 127 };
const int tensor_dimension39 = 0; /* empty TfLiteIntArray */
const TfArray<1, float> quant39_scale = { 1, { 5.8823532711471671e-09, } };
const TfArray<1, int> quant39_zero = { 1, { -43 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(2) int8_t tensor_data40[1*1*3] = { 
  /* [0][][] */ 127,50,86, 
};
const TfArray<3, int> tensor_dimension40 = { 3, { 1,1,3 } };
const TfArray<1, float> quant40_scale = { 1, { 0.00097493914654478431, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(2) int8_t tensor_data41[1*1*3] = { 
  /* [0][][] */ 125,-128,88, 
};
const TfArray<3, int> tensor_dimension41 = { 3, { 1,1,3 } };
const TfArray<1, float> quant41_scale = { 1, { 0.026848364621400833, } };
const TfArray<1, int> quant41_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfArray<3, int> tensor_dimension42 = { 3, { 1,200,3 } };
const TfArray<1, float> quant42_scale = { 1, { 1.0236291885375977, } };
const TfArray<1, int> quant42_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const TfArray<3, int> tensor_dimension43 = { 3, { 1,200,3 } };
const TfArray<1, float> quant43_scale = { 1, { 1.025354266166687, } };
const TfArray<1, int> quant43_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<3, int> tensor_dimension44 = { 3, { 1,200,3 } };
const TfArray<1, float> quant44_scale = { 1, { 0.25448393821716309, } };
const TfArray<1, int> quant44_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<3, int> tensor_dimension45 = { 3, { 1,200,1 } };
const TfArray<1, float> quant45_scale = { 1, { 0.10699654370546341, } };
const TfArray<1, int> quant45_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<3, int> tensor_dimension46 = { 3, { 1,200,3 } };
const TfArray<1, float> quant46_scale = { 1, { 2.2247011661529541, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<3, int> tensor_dimension47 = { 3, { 1,200,1 } };
const TfArray<1, float> quant47_scale = { 1, { 1.1731621026992798, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<3, int> tensor_dimension48 = { 3, { 1,200,1 } };
const TfArray<1, float> quant48_scale = { 1, { 1.1731621026992798, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<3, int> tensor_dimension49 = { 3, { 1,200,1 } };
const TfArray<1, float> quant49_scale = { 1, { 2.0470278263092041, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<3, int> tensor_dimension50 = { 3, { 1,200,3 } };
const TfArray<1, float> quant50_scale = { 1, { 2.1828091144561768, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<3, int> tensor_dimension51 = { 3, { 1,200,3 } };
const TfArray<1, float> quant51_scale = { 1, { 1.5369247198104858, } };
const TfArray<1, int> quant51_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<3, int> tensor_dimension52 = { 3, { 1,200,3 } };
const TfArray<1, float> quant52_scale = { 1, { 1.5316703319549561, } };
const TfArray<1, int> quant52_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<3, int> tensor_dimension53 = { 3, { 1,200,3 } };
const TfArray<1, float> quant53_scale = { 1, { 1.5316703319549561, } };
const TfArray<1, int> quant53_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<3, int> tensor_dimension54 = { 3, { 1,200,3 } };
const TfArray<1, float> quant54_scale = { 1, { 0.012107047252357006, } };
const TfArray<1, int> quant54_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<2, int> tensor_dimension55 = { 2, { 200,128 } };
const TfArray<1, float> quant55_scale = { 1, { 0.0073744547553360462, } };
const TfArray<1, int> quant55_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,200,2,64 } };
const TfArray<1, float> quant56_scale = { 1, { 0.0073744547553360462, } };
const TfArray<1, int> quant56_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<2, int> tensor_dimension57 = { 2, { 200,128 } };
const TfArray<1, float> quant57_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant57_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,200,2,64 } };
const TfArray<1, float> quant58_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,2,200,64 } };
const TfArray<1, float> quant59_scale = { 1, { 0.0073744547553360462, } };
const TfArray<1, int> quant59_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,2,64,200 } };
const TfArray<1, float> quant60_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant60_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<3, int> tensor_dimension61 = { 3, { 2,200,64 } };
const TfArray<1, float> quant61_scale = { 1, { 0.0073744547553360462, } };
const TfArray<1, int> quant61_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<3, int> tensor_dimension62 = { 3, { 1,200,64 } };
const TfArray<1, float> quant62_scale = { 1, { 0.0073744547553360462, } };
const TfArray<1, int> quant62_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<3, int> tensor_dimension63 = { 3, { 1,200,64 } };
const TfArray<1, float> quant63_scale = { 1, { 0.0073744547553360462, } };
const TfArray<1, int> quant63_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<3, int> tensor_dimension64 = { 3, { 2,64,200 } };
const TfArray<1, float> quant64_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant64_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<3, int> tensor_dimension65 = { 3, { 1,64,200 } };
const TfArray<1, float> quant65_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<3, int> tensor_dimension66 = { 3, { 1,64,200 } };
const TfArray<1, float> quant66_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<2, int> tensor_dimension67 = { 2, { 64,200 } };
const TfArray<1, float> quant67_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant67_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<2, int> tensor_dimension68 = { 2, { 64,200 } };
const TfArray<1, float> quant68_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant68_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<2, int> tensor_dimension69 = { 2, { 200,64 } };
const TfArray<1, float> quant69_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant69_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<2, int> tensor_dimension70 = { 2, { 200,200 } };
const TfArray<1, float> quant70_scale = { 1, { 0.020817022770643234, } };
const TfArray<1, int> quant70_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<2, int> tensor_dimension71 = { 2, { 200,64 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00096143147675320506, } };
const TfArray<1, int> quant71_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<2, int> tensor_dimension72 = { 2, { 200,200 } };
const TfArray<1, float> quant72_scale = { 1, { 0.020817022770643234, } };
const TfArray<1, int> quant72_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<3, int> tensor_dimension73 = { 3, { 2,200,200 } };
const TfArray<1, float> quant73_scale = { 1, { 0.020817022770643234, } };
const TfArray<1, int> quant73_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,2,200,200 } };
const TfArray<1, float> quant74_scale = { 1, { 0.020817022770643234, } };
const TfArray<1, int> quant74_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<4, int> tensor_dimension75 = { 4, { 1,2,200,200 } };
const TfArray<1, float> quant75_scale = { 1, { 0.020817022770643234, } };
const TfArray<1, int> quant75_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<4, int> tensor_dimension76 = { 4, { 1,2,200,200 } };
const TfArray<1, float> quant76_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant76_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<2, int> tensor_dimension77 = { 2, { 200,128 } };
const TfArray<1, float> quant77_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant77_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,200,2,64 } };
const TfArray<1, float> quant78_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant78_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,2,200,64 } };
const TfArray<1, float> quant79_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant79_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<3, int> tensor_dimension80 = { 3, { 2,200,200 } };
const TfArray<1, float> quant80_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<3, int> tensor_dimension81 = { 3, { 1,200,200 } };
const TfArray<1, float> quant81_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<3, int> tensor_dimension82 = { 3, { 1,200,200 } };
const TfArray<1, float> quant82_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<3, int> tensor_dimension83 = { 3, { 2,200,64 } };
const TfArray<1, float> quant83_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant83_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<3, int> tensor_dimension84 = { 3, { 1,200,64 } };
const TfArray<1, float> quant84_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant84_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<3, int> tensor_dimension85 = { 3, { 1,200,64 } };
const TfArray<1, float> quant85_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant85_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<2, int> tensor_dimension86 = { 2, { 200,64 } };
const TfArray<1, float> quant86_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant86_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<2, int> tensor_dimension87 = { 2, { 200,64 } };
const TfArray<1, float> quant87_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant87_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<2, int> tensor_dimension88 = { 2, { 64,200 } };
const TfArray<1, float> quant88_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant88_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<2, int> tensor_dimension89 = { 2, { 200,64 } };
const TfArray<1, float> quant89_scale = { 1, { 0.0039627887308597565, } };
const TfArray<1, int> quant89_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<2, int> tensor_dimension90 = { 2, { 64,200 } };
const TfArray<1, float> quant90_scale = { 1, { 0.0039659002795815468, } };
const TfArray<1, int> quant90_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<2, int> tensor_dimension91 = { 2, { 200,64 } };
const TfArray<1, float> quant91_scale = { 1, { 0.0039627887308597565, } };
const TfArray<1, int> quant91_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<3, int> tensor_dimension92 = { 3, { 2,200,64 } };
const TfArray<1, float> quant92_scale = { 1, { 0.0039627887308597565, } };
const TfArray<1, int> quant92_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<4, int> tensor_dimension93 = { 4, { 1,2,200,64 } };
const TfArray<1, float> quant93_scale = { 1, { 0.0039627887308597565, } };
const TfArray<1, int> quant93_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<4, int> tensor_dimension94 = { 4, { 1,200,2,64 } };
const TfArray<1, float> quant94_scale = { 1, { 0.0039627887308597565, } };
const TfArray<1, int> quant94_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 200,128 } };
const TfArray<1, float> quant95_scale = { 1, { 0.0039627887308597565, } };
const TfArray<1, int> quant95_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfArray<2, int> tensor_dimension96 = { 2, { 200,3 } };
const TfArray<1, float> quant96_scale = { 1, { 0.012305278331041336, } };
const TfArray<1, int> quant96_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const TfArray<3, int> tensor_dimension97 = { 3, { 1,200,3 } };
const TfArray<1, float> quant97_scale = { 1, { 0.012305278331041336, } };
const TfArray<1, int> quant97_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const TfArray<3, int> tensor_dimension98 = { 3, { 1,200,3 } };
const TfArray<1, float> quant98_scale = { 1, { 0.24964982271194458, } };
const TfArray<1, int> quant98_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const TfArray<3, int> tensor_dimension99 = { 3, { 1,200,1 } };
const TfArray<1, float> quant99_scale = { 1, { 0.10492342710494995, } };
const TfArray<1, int> quant99_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const TfArray<3, int> tensor_dimension100 = { 3, { 1,200,3 } };
const TfArray<1, float> quant100_scale = { 1, { 2.1164569854736328, } };
const TfArray<1, int> quant100_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const TfArray<3, int> tensor_dimension101 = { 3, { 1,200,1 } };
const TfArray<1, float> quant101_scale = { 1, { 1.1345498561859131, } };
const TfArray<1, int> quant101_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const TfArray<3, int> tensor_dimension102 = { 3, { 1,200,1 } };
const TfArray<1, float> quant102_scale = { 1, { 1.1345498561859131, } };
const TfArray<1, int> quant102_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 0 };
const TfArray<3, int> tensor_dimension103 = { 3, { 1,200,1 } };
const TfArray<1, float> quant103_scale = { 1, { 3.1431572437286377, } };
const TfArray<1, int> quant103_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 0 };
const TfArray<3, int> tensor_dimension104 = { 3, { 1,200,3 } };
const TfArray<1, float> quant104_scale = { 1, { 3.8206701278686523, } };
const TfArray<1, int> quant104_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const TfArray<3, int> tensor_dimension105 = { 3, { 1,200,3 } };
const TfArray<1, float> quant105_scale = { 1, { 4.3492302894592285, } };
const TfArray<1, int> quant105_zero = { 1, { 76 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const TfArray<3, int> tensor_dimension106 = { 3, { 1,200,3 } };
const TfArray<1, float> quant106_scale = { 1, { 4.3440322875976562, } };
const TfArray<1, int> quant106_zero = { 1, { 76 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
const TfArray<3, int> tensor_dimension107 = { 3, { 1,200,3 } };
const TfArray<1, float> quant107_scale = { 1, { 4.344031810760498, } };
const TfArray<1, int> quant107_zero = { 1, { -77 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 0 };
const TfArray<3, int> tensor_dimension108 = { 3, { 1,200,3 } };
const TfArray<1, float> quant108_scale = { 1, { 0.013482739217579365, } };
const TfArray<1, int> quant108_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 0 };
const TfArray<4, int> tensor_dimension109 = { 4, { 1,1,200,3 } };
const TfArray<1, float> quant109_scale = { 1, { 0.013482739217579365, } };
const TfArray<1, int> quant109_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 0 };
const TfArray<4, int> tensor_dimension110 = { 4, { 1,1,200,4 } };
const TfArray<1, float> quant110_scale = { 1, { 0.0053179389797151089, } };
const TfArray<1, int> quant110_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 0 };
const TfArray<4, int> tensor_dimension111 = { 4, { 1,1,200,3 } };
const TfArray<1, float> quant111_scale = { 1, { 0.0075919805094599724, } };
const TfArray<1, int> quant111_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<3, int> tensor_dimension112 = { 3, { 1,200,3 } };
const TfArray<1, float> quant112_scale = { 1, { 0.0075919805094599724, } };
const TfArray<1, int> quant112_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<3, int> tensor_dimension113 = { 3, { 1,200,3 } };
const TfArray<1, float> quant113_scale = { 1, { 0.24643389880657196, } };
const TfArray<1, int> quant113_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<2, int> tensor_dimension114 = { 2, { 1,200 } };
const TfArray<1, float> quant114_scale = { 1, { 0.10269784182310104, } };
const TfArray<1, int> quant114_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<2, int> tensor_dimension115 = { 2, { 1,32 } };
const TfArray<1, float> quant115_scale = { 1, { 0.047212801873683929, } };
const TfArray<1, int> quant115_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<2, int> tensor_dimension116 = { 2, { 1,2 } };
const TfArray<1, float> quant116_scale = { 1, { 0.059587515890598297, } };
const TfArray<1, int> quant116_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<2, int> tensor_dimension117 = { 2, { 1,2 } };
const TfArray<1, float> quant117_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 42 } };
const TfLiteSubParams opdata1 = { kTfLiteActNone };
const TfArray<2, int> inputs1 = { 2, { 42,41 } };
const TfArray<1, int> outputs1 = { 1, { 43 } };
const TfLiteMulParams opdata2 = { kTfLiteActNone };
const TfArray<2, int> inputs2 = { 2, { 43,40 } };
const TfArray<1, int> outputs2 = { 1, { 44 } };
const ALIGN(1) uint8_t opdata3[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs3 = { 2, { 44,2 } };
const TfArray<1, int> outputs3 = { 1, { 45 } };
const TfArray<2, int> inputs4 = { 2, { 44,45 } };
const TfArray<1, int> outputs4 = { 1, { 46 } };
const ALIGN(1) uint8_t opdata5[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs5 = { 2, { 46,2 } };
const TfArray<1, int> outputs5 = { 1, { 47 } };
const TfLiteAddParams opdata6 = { kTfLiteActNone };
const TfArray<2, int> inputs6 = { 2, { 47,39 } };
const TfArray<1, int> outputs6 = { 1, { 48 } };
const TfArray<1, int> inputs7 = { 1, { 48 } };
const TfArray<1, int> outputs7 = { 1, { 49 } };
const TfLiteMulParams opdata8 = { kTfLiteActNone };
const TfArray<2, int> inputs8 = { 2, { 49,38 } };
const TfArray<1, int> outputs8 = { 1, { 50 } };
const TfLiteMulParams opdata9 = { kTfLiteActNone };
const TfArray<2, int> inputs9 = { 2, { 44,50 } };
const TfArray<1, int> outputs9 = { 1, { 51 } };
const TfLiteMulParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 45,50 } };
const TfArray<1, int> outputs10 = { 1, { 52 } };
const TfLiteSubParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 37,52 } };
const TfArray<1, int> outputs11 = { 1, { 53 } };
const TfLiteAddParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 51,53 } };
const TfArray<1, int> outputs12 = { 1, { 54 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 54,36,35 } };
const TfArray<1, int> outputs13 = { 1, { 55 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 55,3 } };
const TfArray<1, int> outputs14 = { 1, { 56 } };
const TfLiteFullyConnectedParams opdata15 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs15 = { 3, { 54,34,33 } };
const TfArray<1, int> outputs15 = { 1, { 57 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 57,3 } };
const TfArray<1, int> outputs16 = { 1, { 58 } };
const TfArray<2, int> inputs17 = { 2, { 56,4 } };
const TfArray<1, int> outputs17 = { 1, { 59 } };
const TfArray<2, int> inputs18 = { 2, { 58,5 } };
const TfArray<1, int> outputs18 = { 1, { 60 } };
const TfLiteReshapeParams opdata19 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs19 = { 2, { 59,6 } };
const TfArray<1, int> outputs19 = { 1, { 61 } };
const ALIGN(4) uint8_t opdata20[4] = { 2, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs20 = { 2, { 7,61 } };
const TfArray<2, int> outputs20 = { 2, { 62,63 } };
const TfLiteReshapeParams opdata21 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs21 = { 2, { 60,8 } };
const TfArray<1, int> outputs21 = { 1, { 64 } };
const ALIGN(4) uint8_t opdata22[4] = { 2, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs22 = { 2, { 7,64 } };
const TfArray<2, int> outputs22 = { 2, { 65,66 } };
const TfLiteReshapeParams opdata23 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs23 = { 2, { 65,9 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteReshapeParams opdata24 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs24 = { 2, { 66,9 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfArray<2, int> inputs25 = { 2, { 67,10 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteFullyConnectedParams opdata26 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs26 = { 3, { 62,69,-1 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfArray<2, int> inputs27 = { 2, { 68,10 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TfLiteFullyConnectedParams opdata28 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs28 = { 3, { 63,71,-1 } };
const TfArray<1, int> outputs28 = { 1, { 72 } };
const ALIGN(4) uint8_t opdata29[8] = { 2, 0, 0, 0, 0, 0, 0, 0,  }; /* op type 83=PACK */
const TfArray<2, int> inputs29 = { 2, { 70,72 } };
const TfArray<1, int> outputs29 = { 1, { 73 } };
const TfLiteReshapeParams opdata30 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs30 = { 2, { 73,11 } };
const TfArray<1, int> outputs30 = { 1, { 74 } };
const TfArray<2, int> inputs31 = { 2, { 74,12 } };
const TfArray<1, int> outputs31 = { 1, { 75 } };
const TfLiteSoftmaxParams opdata32 = { 1 };
const TfArray<1, int> inputs32 = { 1, { 75 } };
const TfArray<1, int> outputs32 = { 1, { 76 } };
const TfLiteFullyConnectedParams opdata33 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs33 = { 3, { 54,32,31 } };
const TfArray<1, int> outputs33 = { 1, { 77 } };
const TfLiteReshapeParams opdata34 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs34 = { 2, { 77,3 } };
const TfArray<1, int> outputs34 = { 1, { 78 } };
const TfArray<2, int> inputs35 = { 2, { 78,4 } };
const TfArray<1, int> outputs35 = { 1, { 79 } };
const TfLiteReshapeParams opdata36 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs36 = { 2, { 76,13 } };
const TfArray<1, int> outputs36 = { 1, { 80 } };
const ALIGN(4) uint8_t opdata37[4] = { 2, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs37 = { 2, { 7,80 } };
const TfArray<2, int> outputs37 = { 2, { 81,82 } };
const TfLiteReshapeParams opdata38 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs38 = { 2, { 79,6 } };
const TfArray<1, int> outputs38 = { 1, { 83 } };
const ALIGN(4) uint8_t opdata39[4] = { 2, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs39 = { 2, { 7,83 } };
const TfArray<2, int> outputs39 = { 2, { 84,85 } };
const TfLiteReshapeParams opdata40 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs40 = { 2, { 84,14 } };
const TfArray<1, int> outputs40 = { 1, { 86 } };
const TfLiteReshapeParams opdata41 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs41 = { 2, { 85,14 } };
const TfArray<1, int> outputs41 = { 1, { 87 } };
const TfArray<2, int> inputs42 = { 2, { 86,10 } };
const TfArray<1, int> outputs42 = { 1, { 88 } };
const TfLiteFullyConnectedParams opdata43 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs43 = { 3, { 81,88,-1 } };
const TfArray<1, int> outputs43 = { 1, { 89 } };
const TfArray<2, int> inputs44 = { 2, { 87,10 } };
const TfArray<1, int> outputs44 = { 1, { 90 } };
const TfLiteFullyConnectedParams opdata45 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs45 = { 3, { 82,90,-1 } };
const TfArray<1, int> outputs45 = { 1, { 91 } };
const ALIGN(4) uint8_t opdata46[8] = { 2, 0, 0, 0, 0, 0, 0, 0,  }; /* op type 83=PACK */
const TfArray<2, int> inputs46 = { 2, { 89,91 } };
const TfArray<1, int> outputs46 = { 1, { 92 } };
const TfLiteReshapeParams opdata47 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs47 = { 2, { 92,15 } };
const TfArray<1, int> outputs47 = { 1, { 93 } };
const TfArray<2, int> inputs48 = { 2, { 93,4 } };
const TfArray<1, int> outputs48 = { 1, { 94 } };
const TfLiteReshapeParams opdata49 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs49 = { 2, { 94,16 } };
const TfArray<1, int> outputs49 = { 1, { 95 } };
const TfLiteFullyConnectedParams opdata50 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs50 = { 3, { 95,30,29 } };
const TfArray<1, int> outputs50 = { 1, { 96 } };
const TfLiteReshapeParams opdata51 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs51 = { 2, { 96,1 } };
const TfArray<1, int> outputs51 = { 1, { 97 } };
const TfLiteAddParams opdata52 = { kTfLiteActNone };
const TfArray<2, int> inputs52 = { 2, { 97,44 } };
const TfArray<1, int> outputs52 = { 1, { 98 } };
const ALIGN(1) uint8_t opdata53[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs53 = { 2, { 98,2 } };
const TfArray<1, int> outputs53 = { 1, { 99 } };
const TfArray<2, int> inputs54 = { 2, { 98,99 } };
const TfArray<1, int> outputs54 = { 1, { 100 } };
const ALIGN(1) uint8_t opdata55[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs55 = { 2, { 100,2 } };
const TfArray<1, int> outputs55 = { 1, { 101 } };
const TfLiteAddParams opdata56 = { kTfLiteActNone };
const TfArray<2, int> inputs56 = { 2, { 101,39 } };
const TfArray<1, int> outputs56 = { 1, { 102 } };
const TfArray<1, int> inputs57 = { 1, { 102 } };
const TfArray<1, int> outputs57 = { 1, { 103 } };
const TfLiteMulParams opdata58 = { kTfLiteActNone };
const TfArray<2, int> inputs58 = { 2, { 103,28 } };
const TfArray<1, int> outputs58 = { 1, { 104 } };
const TfLiteMulParams opdata59 = { kTfLiteActNone };
const TfArray<2, int> inputs59 = { 2, { 98,104 } };
const TfArray<1, int> outputs59 = { 1, { 105 } };
const TfLiteMulParams opdata60 = { kTfLiteActNone };
const TfArray<2, int> inputs60 = { 2, { 99,104 } };
const TfArray<1, int> outputs60 = { 1, { 106 } };
const TfLiteSubParams opdata61 = { kTfLiteActNone };
const TfArray<2, int> inputs61 = { 2, { 27,106 } };
const TfArray<1, int> outputs61 = { 1, { 107 } };
const TfLiteAddParams opdata62 = { kTfLiteActNone };
const TfArray<2, int> inputs62 = { 2, { 105,107 } };
const TfArray<1, int> outputs62 = { 1, { 108 } };
const TfLiteReshapeParams opdata63 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs63 = { 2, { 108,17 } };
const TfArray<1, int> outputs63 = { 1, { 109 } };
const TfLiteConvParams opdata64 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs64 = { 3, { 109,26,25 } };
const TfArray<1, int> outputs64 = { 1, { 110 } };
const TfLiteConvParams opdata65 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 110,24,23 } };
const TfArray<1, int> outputs65 = { 1, { 111 } };
const TfLiteReshapeParams opdata66 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs66 = { 2, { 111,1 } };
const TfArray<1, int> outputs66 = { 1, { 112 } };
const TfLiteAddParams opdata67 = { kTfLiteActNone };
const TfArray<2, int> inputs67 = { 2, { 112,98 } };
const TfArray<1, int> outputs67 = { 1, { 113 } };
const ALIGN(1) uint8_t opdata68[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs68 = { 2, { 113,18 } };
const TfArray<1, int> outputs68 = { 1, { 114 } };
const TfLiteFullyConnectedParams opdata69 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs69 = { 3, { 114,22,21 } };
const TfArray<1, int> outputs69 = { 1, { 115 } };
const TfLiteFullyConnectedParams opdata70 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs70 = { 3, { 115,20,19 } };
const TfArray<1, int> outputs70 = { 1, { 116 } };
const TfLiteSoftmaxParams opdata71 = { 1 };
const TfArray<1, int> inputs71 = { 1, { 116 } };
const TfArray<1, int> outputs71 = { 1, { 117 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension42, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension43, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 185600), (TfLiteIntArray*)&g0::tensor_dimension44, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1824), (TfLiteIntArray*)&g0::tensor_dimension45, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension46, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1408), (TfLiteIntArray*)&g0::tensor_dimension47, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension49, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1216), (TfLiteIntArray*)&g0::tensor_dimension51, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension52, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 160000), (TfLiteIntArray*)&g0::tensor_dimension54, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension56, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension57, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 51200), (TfLiteIntArray*)&g0::tensor_dimension59, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension60, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension62, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64000), (TfLiteIntArray*)&g0::tensor_dimension63, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 51200), (TfLiteIntArray*)&g0::tensor_dimension65, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension66, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension67, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12800), (TfLiteIntArray*)&g0::tensor_dimension68, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 120000), (TfLiteIntArray*)&g0::tensor_dimension70, 40000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80000), (TfLiteIntArray*)&g0::tensor_dimension72, 40000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant72))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension73, 80000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80000), (TfLiteIntArray*)&g0::tensor_dimension74, 80000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension75, 80000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant75))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80000), (TfLiteIntArray*)&g0::tensor_dimension76, 80000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant76))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension77, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant77))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension78, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 160000), (TfLiteIntArray*)&g0::tensor_dimension79, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension80, 80000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant80))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 120000), (TfLiteIntArray*)&g0::tensor_dimension81, 40000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80000), (TfLiteIntArray*)&g0::tensor_dimension82, 40000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension83, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant83))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension84, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant84))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension85, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant85))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12800), (TfLiteIntArray*)&g0::tensor_dimension86, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension87, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension88, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 51200), (TfLiteIntArray*)&g0::tensor_dimension89, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant89))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12800), (TfLiteIntArray*)&g0::tensor_dimension90, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension91, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension92, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension93, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension94, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant94))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension95, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant95))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 25600), (TfLiteIntArray*)&g0::tensor_dimension96, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant96))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension97, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant97))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1824), (TfLiteIntArray*)&g0::tensor_dimension98, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant98))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension99, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant99))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension100, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant100))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1408), (TfLiteIntArray*)&g0::tensor_dimension101, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant101))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension102, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant102))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension103, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant103))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension104, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant104))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1216), (TfLiteIntArray*)&g0::tensor_dimension105, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant105))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension106, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant106))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension107, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant107))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension108, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant108))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension109, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant109))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension110, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant110))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension111, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant111))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension112, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant112))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension113, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant113))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1408), (TfLiteIntArray*)&g0::tensor_dimension114, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant114))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension115, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant115))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension116, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant116))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension117, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant117))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[72] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs40, (TfLiteIntArray*)&g0::outputs40, (TfLiteIntArray*)&g0::inputs40, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata40)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs41, (TfLiteIntArray*)&g0::outputs41, (TfLiteIntArray*)&g0::inputs41, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata41)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs42, (TfLiteIntArray*)&g0::outputs42, (TfLiteIntArray*)&g0::inputs42, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs43, (TfLiteIntArray*)&g0::outputs43, (TfLiteIntArray*)&g0::inputs43, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata43)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs44, (TfLiteIntArray*)&g0::outputs44, (TfLiteIntArray*)&g0::inputs44, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs45, (TfLiteIntArray*)&g0::outputs45, (TfLiteIntArray*)&g0::inputs45, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata45)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs46, (TfLiteIntArray*)&g0::outputs46, (TfLiteIntArray*)&g0::inputs46, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata46)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs47, (TfLiteIntArray*)&g0::outputs47, (TfLiteIntArray*)&g0::inputs47, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata47)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs48, (TfLiteIntArray*)&g0::outputs48, (TfLiteIntArray*)&g0::inputs48, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs49, (TfLiteIntArray*)&g0::outputs49, (TfLiteIntArray*)&g0::inputs49, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata49)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs50, (TfLiteIntArray*)&g0::outputs50, (TfLiteIntArray*)&g0::inputs50, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata50)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs51, (TfLiteIntArray*)&g0::outputs51, (TfLiteIntArray*)&g0::inputs51, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata51)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs52, (TfLiteIntArray*)&g0::outputs52, (TfLiteIntArray*)&g0::inputs52, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata52)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs53, (TfLiteIntArray*)&g0::outputs53, (TfLiteIntArray*)&g0::inputs53, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata53)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs54, (TfLiteIntArray*)&g0::outputs54, (TfLiteIntArray*)&g0::inputs54, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs55, (TfLiteIntArray*)&g0::outputs55, (TfLiteIntArray*)&g0::inputs55, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata55)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs56, (TfLiteIntArray*)&g0::outputs56, (TfLiteIntArray*)&g0::inputs56, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata56)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs57, (TfLiteIntArray*)&g0::outputs57, (TfLiteIntArray*)&g0::inputs57, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs58, (TfLiteIntArray*)&g0::outputs58, (TfLiteIntArray*)&g0::inputs58, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata58)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs59, (TfLiteIntArray*)&g0::outputs59, (TfLiteIntArray*)&g0::inputs59, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata59)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs60, (TfLiteIntArray*)&g0::outputs60, (TfLiteIntArray*)&g0::inputs60, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata60)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs61, (TfLiteIntArray*)&g0::outputs61, (TfLiteIntArray*)&g0::inputs61, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata61)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs62, (TfLiteIntArray*)&g0::outputs62, (TfLiteIntArray*)&g0::inputs62, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata62)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs63, (TfLiteIntArray*)&g0::outputs63, (TfLiteIntArray*)&g0::inputs63, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata63)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs64, (TfLiteIntArray*)&g0::outputs64, (TfLiteIntArray*)&g0::inputs64, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata64)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs65, (TfLiteIntArray*)&g0::outputs65, (TfLiteIntArray*)&g0::inputs65, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata65)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs66, (TfLiteIntArray*)&g0::outputs66, (TfLiteIntArray*)&g0::inputs66, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata66)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs67, (TfLiteIntArray*)&g0::outputs67, (TfLiteIntArray*)&g0::inputs67, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata67)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs68, (TfLiteIntArray*)&g0::outputs68, (TfLiteIntArray*)&g0::inputs68, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata68)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs69, (TfLiteIntArray*)&g0::outputs69, (TfLiteIntArray*)&g0::inputs69, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata69)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs70, (TfLiteIntArray*)&g0::outputs70, (TfLiteIntArray*)&g0::inputs70, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata70)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs71, (TfLiteIntArray*)&g0::outputs71, (TfLiteIntArray*)&g0::inputs71, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata71)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[72] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs40, (TfLiteIntArray*)&g0::outputs40, (TfLiteIntArray*)&g0::inputs40, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata40)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs41, (TfLiteIntArray*)&g0::outputs41, (TfLiteIntArray*)&g0::inputs41, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata41)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs42, (TfLiteIntArray*)&g0::outputs42, (TfLiteIntArray*)&g0::inputs42, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs43, (TfLiteIntArray*)&g0::outputs43, (TfLiteIntArray*)&g0::inputs43, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata43)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs44, (TfLiteIntArray*)&g0::outputs44, (TfLiteIntArray*)&g0::inputs44, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs45, (TfLiteIntArray*)&g0::outputs45, (TfLiteIntArray*)&g0::inputs45, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata45)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs46, (TfLiteIntArray*)&g0::outputs46, (TfLiteIntArray*)&g0::inputs46, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata46)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs47, (TfLiteIntArray*)&g0::outputs47, (TfLiteIntArray*)&g0::inputs47, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata47)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs48, (TfLiteIntArray*)&g0::outputs48, (TfLiteIntArray*)&g0::inputs48, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs49, (TfLiteIntArray*)&g0::outputs49, (TfLiteIntArray*)&g0::inputs49, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata49)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs50, (TfLiteIntArray*)&g0::outputs50, (TfLiteIntArray*)&g0::inputs50, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata50)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs51, (TfLiteIntArray*)&g0::outputs51, (TfLiteIntArray*)&g0::inputs51, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata51)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs52, (TfLiteIntArray*)&g0::outputs52, (TfLiteIntArray*)&g0::inputs52, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata52)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs53, (TfLiteIntArray*)&g0::outputs53, (TfLiteIntArray*)&g0::inputs53, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata53)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs54, (TfLiteIntArray*)&g0::outputs54, (TfLiteIntArray*)&g0::inputs54, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs55, (TfLiteIntArray*)&g0::outputs55, (TfLiteIntArray*)&g0::inputs55, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata55)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs56, (TfLiteIntArray*)&g0::outputs56, (TfLiteIntArray*)&g0::inputs56, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata56)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs57, (TfLiteIntArray*)&g0::outputs57, (TfLiteIntArray*)&g0::inputs57, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs58, (TfLiteIntArray*)&g0::outputs58, (TfLiteIntArray*)&g0::inputs58, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata58)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs59, (TfLiteIntArray*)&g0::outputs59, (TfLiteIntArray*)&g0::inputs59, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata59)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs60, (TfLiteIntArray*)&g0::outputs60, (TfLiteIntArray*)&g0::inputs60, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata60)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs61, (TfLiteIntArray*)&g0::outputs61, (TfLiteIntArray*)&g0::inputs61, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata61)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs62, (TfLiteIntArray*)&g0::outputs62, (TfLiteIntArray*)&g0::inputs62, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata62)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs63, (TfLiteIntArray*)&g0::outputs63, (TfLiteIntArray*)&g0::inputs63, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata63)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs64, (TfLiteIntArray*)&g0::outputs64, (TfLiteIntArray*)&g0::inputs64, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata64)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs65, (TfLiteIntArray*)&g0::outputs65, (TfLiteIntArray*)&g0::inputs65, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata65)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs66, (TfLiteIntArray*)&g0::outputs66, (TfLiteIntArray*)&g0::inputs66, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata66)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs67, (TfLiteIntArray*)&g0::outputs67, (TfLiteIntArray*)&g0::inputs67, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata67)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs68, (TfLiteIntArray*)&g0::outputs68, (TfLiteIntArray*)&g0::inputs68, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata68)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs69, (TfLiteIntArray*)&g0::outputs69, (TfLiteIntArray*)&g0::inputs69, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata69)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs70, (TfLiteIntArray*)&g0::outputs70, (TfLiteIntArray*)&g0::inputs70, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata70)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs71, (TfLiteIntArray*)&g0::outputs71, (TfLiteIntArray*)&g0::inputs71, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata71)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_SUB, OP_MUL, OP_MEAN, OP_SQUARED_DIFFERENCE, OP_MEAN, OP_ADD, OP_RSQRT, OP_MUL, OP_MUL, OP_MUL, OP_SUB, OP_ADD, OP_FULLY_CONNECTED, OP_RESHAPE, OP_FULLY_CONNECTED, OP_RESHAPE, OP_TRANSPOSE, OP_TRANSPOSE, OP_RESHAPE, OP_SPLIT, OP_RESHAPE, OP_SPLIT, OP_RESHAPE, OP_RESHAPE, OP_TRANSPOSE, OP_FULLY_CONNECTED, OP_TRANSPOSE, OP_FULLY_CONNECTED, OP_PACK, OP_RESHAPE, OP_TRANSPOSE, OP_SOFTMAX, OP_FULLY_CONNECTED, OP_RESHAPE, OP_TRANSPOSE, OP_RESHAPE, OP_SPLIT, OP_RESHAPE, OP_SPLIT, OP_RESHAPE, OP_RESHAPE, OP_TRANSPOSE, OP_FULLY_CONNECTED, OP_TRANSPOSE, OP_FULLY_CONNECTED, OP_PACK, OP_RESHAPE, OP_TRANSPOSE, OP_RESHAPE, OP_FULLY_CONNECTED, OP_RESHAPE, OP_ADD, OP_MEAN, OP_SQUARED_DIFFERENCE, OP_MEAN, OP_ADD, OP_RSQRT, OP_MUL, OP_MUL, OP_MUL, OP_SUB, OP_ADD, OP_RESHAPE, OP_CONV_2D, OP_CONV_2D, OP_RESHAPE, OP_ADD, OP_MEAN, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 118, };
const size_t tflNodes_subgraph_index[] = {0, 72, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  117, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_28_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 118;
  for (size_t i = 0; i < 118; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_SUB] = Register_SUB();
  registrations[OP_MUL] = Register_MUL();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_SQUARED_DIFFERENCE] = Register_SQUARED_DIFFERENCE();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_RSQRT] = Register_RSQRT();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_TRANSPOSE] = Register_TRANSPOSE();
  registrations[OP_SPLIT] = Register_SPLIT();
  registrations[OP_PACK] = Register_PACK();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
  registrations[OP_CONV_2D] = Register_CONV_2D();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_28_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_28_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_28_invoke() {
  for (size_t i = 0; i < 72; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_28_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
